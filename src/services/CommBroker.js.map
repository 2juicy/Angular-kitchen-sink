{"version":3,"file":"CommBroker.js","sourceRoot":"","sources":["CommBroker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Injectable} from '@angular/core';\r\nimport {Observer} from \"rxjs/Observer\";\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/share';\r\nimport {Subject} from \"rxjs/Subject\";\r\n\r\n/**\r\n\r\n CommBroker is a React type Mediator injectable service provider\r\n\r\n Examples\r\n ============\r\n self.onEvent('click').subscribe((e:IMessage)=> {\r\n        console.log('I heard a click');\r\n    });\r\n\r\n // won't work, event != jump\r\n self.onEvent('jump').subscribe((e:IMessage)=> {\r\n        console.log('I heard a click');\r\n    });\r\n\r\n // wont work, this != self\r\n self.onInstance(null).subscribe((e:IMessage)=> {\r\n        console.log('XYZ#$%^& should never come here...');\r\n    });\r\n\r\n self.onInstanceAndEvent(this, 'click').subscribe((e:IMessage)=> {\r\n        console.log(`I heard you commBroker on event click ` + e.message);\r\n    });\r\n\r\n self.onInstanceAndEvent(self, 'click').first().subscribe((e:IMessage)=> {\r\n        var commBroker:CommBroker = e.fromInstance;\r\n        console.log(`just one ${e.event} from ${commBroker.toString()}`);\r\n    });\r\n\r\n self.onInstanceAndEvent(self, 'click').subscribe((e:IMessage) => {\r\n        console.log(`handle success: rx ${e.event}`)\r\n    }, (e) => {\r\n        console.log(`handle error ${e}`)\r\n    }, () => {\r\n        console.log(`handle complete`)\r\n    });\r\n\r\n // before stream ready\r\n var msg1:IMessage = {\r\n        fromInstance: self,\r\n        event: 'click',\r\n        context: 1,\r\n        message: 'before stream is ready'\r\n    };\r\n self.fire(msg1);\r\n\r\n // after stream ready\r\n setTimeout(function () {\r\n        var msg2:IMessage = {\r\n            fromInstance: self,\r\n            event: 'click',\r\n            context: 2,\r\n            message: 'after stream is ready'\r\n        };\r\n        self.fire(msg2);\r\n    }, 2000)\r\n **/\r\n\r\n\r\nexport interface IMessage {\r\n    fromInstance: any,\r\n    event: string,\r\n    context: any,\r\n    message: any\r\n}\r\n\r\n// create an alias type just so it's easier to associate\r\ntype SubjectMessage = Subject<IMessage>;\r\ntype SubjectMessages = Subject<Array<SubjectMessage>>;\r\n\r\n@Injectable()\r\nexport class CommBroker {\r\n    private streamMessages:Subject<IMessage>;\r\n    private services:string[];\r\n    private randomName:number = Math.random();\r\n\r\n    constructor() {\r\n        var self = this;\r\n        self.services = [];\r\n        self.streamMessages = new Subject() as SubjectMessage;\r\n\r\n        // we use share as a shorthand for publish() which converts cold to hot\r\n        // observable as well as connect() / refCount()\r\n        // when connected references moves from 0 to 1\r\n        self.streamMessages.share();\r\n\r\n        // if we wish to use a unidirectional stream we can convert to Observable instead of subject\r\n        //self.stream = new Observable(trigger => {\r\n        //    trigger.next(msg);\r\n        //    trigger.error('boom');\r\n        //    trigger.complete('done');\r\n        //}).share();\r\n\r\n        // this is the only global member we expose\r\n        document['commBroker'] = this;\r\n    }\r\n\r\n    public toString() {\r\n        return 'CommBroker ' + this.randomName; // to test uniqueness\r\n    }\r\n\r\n    /**\r\n     With fire we push a stream of IMessages into our stream.\r\n     @method fire\r\n     @params IMessage\r\n     **/\r\n    public fire(iMessage:IMessage):void {\r\n        var self = this;\r\n        self.streamMessages.next(iMessage);\r\n    }\r\n\r\n    public onEvent(event:string) {\r\n        var self = this;\r\n        return self.streamMessages.filter((e)=> {\r\n            return e.event == event;\r\n        })\r\n    }\r\n\r\n    public onInstance(instance:any) {\r\n        var self = this;\r\n        return self.streamMessages.filter((e)=> {\r\n            return e.fromInstance == instance;\r\n        })\r\n    }\r\n\r\n    public onInstanceAndEvent(instance:any, event:string) {\r\n        var self = this;\r\n        return self.streamMessages.filter((e)=> {\r\n            return e.fromInstance == instance && e.event == event\r\n        })\r\n    }\r\n\r\n    /**\r\n     Register a service  that others can query.\r\n     @method setService\r\n     @param {String} i_name\r\n     @param {Object} i_service\r\n     @return none\r\n     **/\r\n    setService(i_name, i_service) {\r\n        this.services[i_name] = i_service;\r\n    }\r\n\r\n    /**\r\n     Get a registered service.\r\n     @method getService\r\n     @param {String} i_name\r\n     @return {Object} services member\r\n     **/\r\n    getService(i_name):any {\r\n        if (i_name == undefined) {\r\n            //log('cant get set undefined service ' + i_name);\r\n            return undefined;\r\n        }\r\n        if (this.services[i_name]) {\r\n            return this.services[i_name]\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     Expose all services and data members.\r\n     @method getAllServices\r\n     @return {Object} services\r\n     **/\r\n    getAllServices() {\r\n        return this.services;\r\n    }\r\n\r\n    /**\r\n     Clear all current registered services\r\n     @method clearServices\r\n     **/\r\n    clearServices() {\r\n        var self = this;\r\n        // delete self.services;\r\n        self.services = undefined;\r\n    }\r\n\r\n    /**\r\n     Register a data member that others can query.\r\n     @method setValue\r\n     @param {String} i_name\r\n     @param {Object} i_value\r\n     @param {Event} i_fireEvent\r\n     @return none\r\n     **/\r\n    setValue(i_name:any, i_value:any, i_fireEvent?:string):void {\r\n        var self = this;\r\n        this.services[i_name] = i_value;\r\n        if (i_fireEvent) {\r\n            var msg:IMessage = {\r\n                fromInstance: self,\r\n                event: i_fireEvent,\r\n                context: null,\r\n                message: {name: i_name, value: i_value}\r\n            };\r\n            self.fire(msg);\r\n        }\r\n    }\r\n\r\n    /**\r\n     Get a registered data member.\r\n     @method getValue\r\n     @param {String} i_name\r\n     @return {Object} m_services member\r\n     **/\r\n    getValue(i_name):any {\r\n        if (this.services[i_name]) {\r\n            return this.services[i_name]\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n"]}