var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var redux_1 = require("redux");
var thunkMiddleware = require('redux-thunk');
var angular2_redux_util_1 = require("angular2-redux-util");
var Lib = (function () {
    function Lib() {
    }
    Lib.StoreFactory = function (reducerList) {
        return function () {
            var reducers = redux_1.combineReducers(reducerList);
            var middlewareEnhancer = redux_1.applyMiddleware(thunkMiddleware);
            var isDebug = window.devToolsExtension;
            var applyDevTools = function () { return isDebug ? window.devToolsExtension() : function (f) { return f; }; };
            var enhancers = redux_1.compose(middlewareEnhancer, applyDevTools());
            var createStoreWithEnhancers = enhancers(redux_1.createStore);
            var reduxAppStore = createStoreWithEnhancers(reducers);
            return new angular2_redux_util_1.AppStore(reduxAppStore);
        };
    };
    Lib.loadGlobals = function () {
    };
    Lib.LoadComponentAsync = function (name, path) {
        return System.import(path).then(function (c) { return c[name]; });
    };
    Lib.log = function (msg) {
        console.log(new Date().toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1") + ': ' + msg);
    };
    Lib.guid = function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    };
    Lib.Xml2Json = function () {
        var xmlToJSON = (function () {
            this.version = "1.3";
            var options = {
                mergeCDATA: true,
                grokAttr: true,
                grokText: true,
                normalize: true,
                xmlns: true,
                namespaceKey: '_ns',
                textKey: '_text',
                valueKey: '_value',
                attrKey: '_attr',
                cdataKey: '_cdata',
                attrsAsObject: true,
                stripAttrPrefix: true,
                stripElemPrefix: true,
                childrenAsArray: true
            };
            var prefixMatch = new RegExp('(?!xmlns)^.*:/');
            var trimMatch = new RegExp('^\s+|\s+$g');
            this.grokType = function (sValue) {
                if (/^\s*$/.test(sValue)) {
                    return null;
                }
                if (/^(?:true|false)$/i.test(sValue)) {
                    return sValue.toLowerCase() === "true";
                }
                if (isFinite(sValue)) {
                    return parseFloat(sValue);
                }
                return sValue;
            };
            this.parseString = function (xmlString, opt) {
                return this.parseXML(this.stringToXML(xmlString), opt);
            };
            this.parseXML = function (oXMLParent, opt) {
                for (var key in opt) {
                    options[key] = opt[key];
                }
                var vResult = {}, nLength = 0, sCollectedTxt = "";
                if (options.xmlns && oXMLParent.namespaceURI) {
                    vResult[options.namespaceKey] = oXMLParent.namespaceURI;
                }
                if (oXMLParent.attributes && oXMLParent.attributes.length > 0) {
                    var vAttribs = {};
                    for (nLength; nLength < oXMLParent.attributes.length; nLength++) {
                        var oAttrib = oXMLParent.attributes.item(nLength);
                        vContent = {};
                        var attribName = '';
                        if (options.stripAttrPrefix) {
                            attribName = oAttrib.name.replace(prefixMatch, '');
                        }
                        else {
                            attribName = oAttrib.name;
                        }
                        if (options.grokAttr) {
                            vContent[options.valueKey] = this.grokType(oAttrib.value.replace(trimMatch, ''));
                        }
                        else {
                            vContent[options.valueKey] = oAttrib.value.replace(trimMatch, '');
                        }
                        if (options.xmlns && oAttrib.namespaceURI) {
                            vContent[options.namespaceKey] = oAttrib.namespaceURI;
                        }
                        if (options.attrsAsObject) {
                            vAttribs[attribName] = vContent;
                        }
                        else {
                            vResult[options.attrKey + attribName] = vContent;
                        }
                    }
                    if (options.attrsAsObject) {
                        vResult[options.attrKey] = vAttribs;
                    }
                    else {
                    }
                }
                if (oXMLParent.hasChildNodes()) {
                    for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
                        oNode = oXMLParent.childNodes.item(nItem);
                        if (oNode.nodeType === 4) {
                            if (options.mergeCDATA) {
                                sCollectedTxt += oNode.nodeValue;
                            }
                            else {
                                if (vResult.hasOwnProperty(options.cdataKey)) {
                                    if (vResult[options.cdataKey].constructor !== Array) {
                                        vResult[options.cdataKey] = [vResult[options.cdataKey]];
                                    }
                                    vResult[options.cdataKey].push(oNode.nodeValue);
                                }
                                else {
                                    if (options.childrenAsArray) {
                                        vResult[options.cdataKey] = [];
                                        vResult[options.cdataKey].push(oNode.nodeValue);
                                    }
                                    else {
                                        vResult[options.cdataKey] = oNode.nodeValue;
                                    }
                                }
                            }
                        }
                        else if (oNode.nodeType === 3) {
                            sCollectedTxt += oNode.nodeValue;
                        }
                        else if (oNode.nodeType === 1) {
                            if (nLength === 0) {
                                vResult = {};
                            }
                            if (options.stripElemPrefix) {
                                sProp = oNode.nodeName.replace(prefixMatch, '');
                            }
                            else {
                                sProp = oNode.nodeName;
                            }
                            vContent = xmlToJSON.parseXML(oNode);
                            if (vResult.hasOwnProperty(sProp)) {
                                if (vResult[sProp].constructor !== Array) {
                                    vResult[sProp] = [vResult[sProp]];
                                }
                                vResult[sProp].push(vContent);
                            }
                            else {
                                if (options.childrenAsArray) {
                                    vResult[sProp] = [];
                                    vResult[sProp].push(vContent);
                                }
                                else {
                                    vResult[sProp] = vContent;
                                }
                                nLength++;
                            }
                        }
                    }
                }
                else if (!sCollectedTxt) {
                    if (options.childrenAsArray) {
                        vResult[options.textKey] = [];
                        vResult[options.textKey].push(null);
                    }
                    else {
                        vResult[options.textKey] = null;
                    }
                }
                if (sCollectedTxt) {
                    if (options.grokText) {
                        var value = this.grokType(sCollectedTxt.replace(trimMatch, ''));
                        if (value !== null && value !== undefined) {
                            vResult[options.textKey] = value;
                        }
                    }
                    else if (options.normalize) {
                        vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '').replace(/\s+/g, " ");
                    }
                    else {
                        vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '');
                    }
                }
                return vResult;
            };
            this.xmlToString = function (xmlDoc) {
                try {
                    var xmlString = xmlDoc.xml ? xmlDoc.xml : (new XMLSerializer()).serializeToString(xmlDoc);
                    return xmlString;
                }
                catch (err) {
                    return null;
                }
            };
            this.stringToXML = function (xmlString) {
                try {
                    var xmlDoc = null;
                    if (window.DOMParser) {
                        var parser = new DOMParser();
                        xmlDoc = parser.parseFromString(xmlString, "text/xml");
                        return xmlDoc;
                    }
                    else {
                        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                        xmlDoc.async = false;
                        xmlDoc.loadXML(xmlString);
                        return xmlDoc;
                    }
                }
                catch (e) {
                    return null;
                }
            };
            return this;
        }).call({});
        return xmlToJSON;
    };
    Lib.ReduxLoggerMiddleware = function (store) { return function (next) { return function (action) {
        var result = next(action);
        return result;
    }; }; };
    Lib = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Lib);
    return Lib;
})();
exports.Lib = Lib;
if (!Object.assign) {
    Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            "use strict";
            if (target === undefined || target === null) {
                throw new TypeError("Cannot convert first argument to object");
            }
            var to = Object(target);
            for (var i = 1; i < arguments.length; i++) {
                var nextSource = arguments[i];
                if (nextSource === undefined || nextSource === null) {
                    continue;
                }
                nextSource = Object(nextSource);
                var keysArray = Object.keys(nextSource);
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi50cyJdLCJuYW1lcyI6WyJMaWIiLCJMaWIuY29uc3RydWN0b3IiLCJMaWIuU3RvcmVGYWN0b3J5IiwiTGliLmxvYWRHbG9iYWxzIiwiTGliLkxvYWRDb21wb25lbnRBc3luYyIsIkxpYi5sb2ciLCJMaWIuZ3VpZCIsIkxpYi5ndWlkLnM0IiwiTGliLlhtbDJKc29uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSxxQkFBeUIsZUFBZSxDQUFDLENBQUE7QUFDekMsc0JBQXFFLE9BQU8sQ0FBQyxDQUFBO0FBQzdFLElBQVksZUFBZSxXQUFNLGFBQWEsQ0FBQyxDQUFBO0FBQy9DLG9DQUF1QixxQkFBcUIsQ0FBQyxDQUFBO0FBSTdDO0lBQUFBO0lBMlJBQyxDQUFDQTtJQXhSVUQsZ0JBQVlBLEdBQW5CQSxVQUFvQkEsV0FBa0JBO1FBQ2xDRSxNQUFNQSxDQUFDQTtZQUNIQSxJQUFNQSxRQUFRQSxHQUFHQSx1QkFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7WUFFOUNBLElBQU1BLGtCQUFrQkEsR0FBR0EsdUJBQWVBLENBQU1BLGVBQWVBLENBQUNBLENBQUNBO1lBQ2pFQSxJQUFNQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxpQkFBaUJBLENBQUNBO1lBQ3pDQSxJQUFNQSxhQUFhQSxHQUFHQSxjQUFNQSxPQUFBQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxpQkFBaUJBLEVBQUVBLEdBQUdBLFVBQUFBLENBQUNBLElBQUlBLE9BQUFBLENBQUNBLEVBQURBLENBQUNBLEVBQTdDQSxDQUE2Q0EsQ0FBQ0E7WUFDMUVBLElBQU1BLFNBQVNBLEdBQUdBLGVBQU9BLENBQUNBLGtCQUFrQkEsRUFBRUEsYUFBYUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDL0RBLElBQU1BLHdCQUF3QkEsR0FBR0EsU0FBU0EsQ0FBQ0EsbUJBQVdBLENBQUNBLENBQUNBO1lBQ3hEQSxJQUFNQSxhQUFhQSxHQUFHQSx3QkFBd0JBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lB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QUFJLENBQUMsQ0FBQyxDQUFDO29CQUNsRCxRQUFRLENBQUM7Z0JBQ2IsQ0FBQztnQkFDRCxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUVoQyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUN4QyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLEdBQUcsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7b0JBQzNFLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDbkMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDaEUsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzt3QkFDeEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDdEMsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQztZQUNELE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDZCxDQUFDO0tBQ0osQ0FBQyxDQUFDO0FBQ1AsQ0FBQyIsImZpbGUiOiJMaWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29tbW9uIExpYnJhcnkgKiovXHJcblxyXG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ2FuZ3VsYXIyL2NvcmUnO1xyXG5pbXBvcnQge2NyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZX0gZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCAqIGFzIHRodW5rTWlkZGxld2FyZSBmcm9tICdyZWR1eC10aHVuayc7XHJcbmltcG9ydCB7QXBwU3RvcmV9IGZyb20gXCJhbmd1bGFyMi1yZWR1eC11dGlsXCI7XHJcblxyXG5pbXBvcnQge0xvZ2dlck1pZGRsZXdhcmV9IGZyb20gXCJhbmd1bGFyMi1yZWR1eC11dGlsXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMaWIge1xyXG5cclxuICAgIHN0YXRpYyBTdG9yZUZhY3RvcnkocmVkdWNlckxpc3Q6T2JqZWN0KSB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVkdWNlcnMgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlckxpc3QpO1xyXG4gICAgICAgICAgICAvL2NvbnN0IG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZSg8YW55PnRodW5rTWlkZGxld2FyZSwgTG9nZ2VyTWlkZGxld2FyZSk7IC8vIHRvIGVuYWJsZSBsb2dnZXJcclxuICAgICAgICAgICAgY29uc3QgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlKDxhbnk+dGh1bmtNaWRkbGV3YXJlKTtcclxuICAgICAgICAgICAgY29uc3QgaXNEZWJ1ZyA9IHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbjtcclxuICAgICAgICAgICAgY29uc3QgYXBwbHlEZXZUb29scyA9ICgpID0+IGlzRGVidWcgPyB3aW5kb3cuZGV2VG9vbHNFeHRlbnNpb24oKSA6IGYgPT4gZjtcclxuICAgICAgICAgICAgY29uc3QgZW5oYW5jZXJzID0gY29tcG9zZShtaWRkbGV3YXJlRW5oYW5jZXIsIGFwcGx5RGV2VG9vbHMoKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVN0b3JlV2l0aEVuaGFuY2VycyA9IGVuaGFuY2VycyhjcmVhdGVTdG9yZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlZHV4QXBwU3RvcmUgPSBjcmVhdGVTdG9yZVdpdGhFbmhhbmNlcnMocmVkdWNlcnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFwcFN0b3JlKHJlZHV4QXBwU3RvcmUpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGxvYWRHbG9iYWxzKCkge1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBMb2FkQ29tcG9uZW50QXN5bmMobmFtZTpzdHJpbmcsIHBhdGg6c3RyaW5nKSB7XHJcblxyXG4gICAgICAgIHJldHVybiBTeXN0ZW0uaW1wb3J0KHBhdGgpLnRoZW4oYyA9PiBjW25hbWVdKTtcclxuXHJcbiAgICAgICAgLy9yZXR1cm4gU3lzdGVtLmltcG9ydCgnL2Rpc3QvcHVibGljL291dC5qcycpXHJcbiAgICAgICAgLy8gICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gICAgICAgIGFsZXJ0KCdwcm9iIGxvYWRpbmcgb3V0LmpzICcgKyBlKTtcclxuICAgICAgICAvLyAgICB9KS50aGVuKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gICAgICAgIGFsZXJ0KGUpO1xyXG4gICAgICAgIC8vICAgICAgICBhbGVydChlW25hbWVdKTtcclxuICAgICAgICAvLyAgICAgICAgYWxlcnQoSlNPTi5zdHJpbmdpZnkoZSkpO1xyXG4gICAgICAgIC8vICAgICAgICByZXR1cm4gU3lzdGVtLmltcG9ydCgnQXBwMScpLnRoZW4oYyA9PiBjW25hbWVdKTtcclxuICAgICAgICAvLyAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbG9nKG1zZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKCkucmVwbGFjZSgvLiooXFxkezJ9OlxcZHsyfTpcXGR7Mn0pLiovLCBcIiQxXCIpICsgJzogJyArIG1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGd1aWQoKTpzdHJpbmcge1xyXG4gICAgICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcclxuICAgICAgICAgICAgICAgIC50b1N0cmluZygxNilcclxuICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArXHJcbiAgICAgICAgICAgIHM0KCkgKyAnLScgKyBzNCgpICsgczQoKSArIHM0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIFJlZHV4TG9nZ2VyTWlkZGxld2FyZSA9IHN0b3JlID0+IG5leHQgPT4gYWN0aW9uID0+IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRpc3BhdGNoaW5nXCIsIGFjdGlvbi50eXBlKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJuZXh0IHN0YXRlXCIsIHN0b3JlLmdldFN0YXRlKCkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIFhtbDJKc29uKCkge1xyXG4gICAgICAgIC8vaHR0cHM6Ly9naXRodWIuY29tL21ldGF0cmliYWwveG1sVG9KU09OXHJcbiAgICAgICAgdmFyIHhtbFRvSlNPTiA9IChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZlcnNpb24gPSBcIjEuM1wiO1xyXG5cclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7IC8vIHNldCB1cCB0aGUgZGVmYXVsdCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBtZXJnZUNEQVRBOiB0cnVlLCAvLyBleHRyYWN0IGNkYXRhIGFuZCBtZXJnZSB3aXRoIHRleHRcclxuICAgICAgICAgICAgICAgIGdyb2tBdHRyOiB0cnVlLCAvLyBjb252ZXJ0IHRydXRoeSBhdHRyaWJ1dGVzIHRvIGJvb2xlYW4sIGV0Y1xyXG4gICAgICAgICAgICAgICAgZ3Jva1RleHQ6IHRydWUsIC8vIGNvbnZlcnQgdHJ1dGh5IHRleHQvYXR0ciB0byBib29sZWFuLCBldGNcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZTogdHJ1ZSwgLy8gY29sbGFwc2UgbXVsdGlwbGUgc3BhY2VzIHRvIHNpbmdsZSBzcGFjZVxyXG4gICAgICAgICAgICAgICAgeG1sbnM6IHRydWUsIC8vIGluY2x1ZGUgbmFtZXNwYWNlcyBhcyBhdHRyaWJ1dGUgaW4gb3V0cHV0XHJcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2VLZXk6ICdfbnMnLCAvLyB0YWcgbmFtZSBmb3IgbmFtZXNwYWNlIG9iamVjdHNcclxuICAgICAgICAgICAgICAgIHRleHRLZXk6ICdfdGV4dCcsIC8vIHRhZyBuYW1lIGZvciB0ZXh0IG5vZGVzXHJcbiAgICAgICAgICAgICAgICB2YWx1ZUtleTogJ192YWx1ZScsIC8vIHRhZyBuYW1lIGZvciBhdHRyaWJ1dGUgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICBhdHRyS2V5OiAnX2F0dHInLCAvLyB0YWcgZm9yIGF0dHIgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICBjZGF0YUtleTogJ19jZGF0YScsIC8vIHRhZyBmb3IgY2RhdGEgbm9kZXMgKGlnbm9yZWQgaWYgbWVyZ2VDREFUQSBpcyB0cnVlKVxyXG4gICAgICAgICAgICAgICAgYXR0cnNBc09iamVjdDogdHJ1ZSwgLy8gaWYgZmFsc2UsIGtleSBpcyB1c2VkIGFzIHByZWZpeCB0byBuYW1lLCBzZXQgcHJlZml4IHRvICcnIHRvIG1lcmdlIGNoaWxkcmVuIGFuZCBhdHRycy5cclxuICAgICAgICAgICAgICAgIHN0cmlwQXR0clByZWZpeDogdHJ1ZSwgLy8gcmVtb3ZlIG5hbWVzcGFjZSBwcmVmaXhlcyBmcm9tIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgIHN0cmlwRWxlbVByZWZpeDogdHJ1ZSwgLy8gZm9yIGVsZW1lbnRzIG9mIHNhbWUgbmFtZSBpbiBkaWZmIG5hbWVzcGFjZXMsIHlvdSBjYW4gZW5hYmxlIG5hbWVzcGFjZXMgYW5kIGFjY2VzcyB0aGUgbnNrZXkgcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQXNBcnJheTogdHJ1ZSAvLyBmb3JjZSBjaGlsZHJlbiBpbnRvIGFycmF5c1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHByZWZpeE1hdGNoOmFueSA9IG5ldyBSZWdFeHAoJyg/IXhtbG5zKV4uKjovJyk7XHJcbiAgICAgICAgICAgIHZhciB0cmltTWF0Y2g6YW55ID0gbmV3IFJlZ0V4cCgnXlxccyt8XFxzKyRnJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdyb2tUeXBlID0gZnVuY3Rpb24gKHNWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKC9eXFxzKiQvLnRlc3Qoc1ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKC9eKD86dHJ1ZXxmYWxzZSkkL2kudGVzdChzVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNWYWx1ZS50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShzVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBzVmFsdWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhcnNlU3RyaW5nID0gZnVuY3Rpb24gKHhtbFN0cmluZywgb3B0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVhNTCh0aGlzLnN0cmluZ1RvWE1MKHhtbFN0cmluZyksIG9wdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VYTUwgPSBmdW5jdGlvbiAob1hNTFBhcmVudCwgb3B0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gb3B0W2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHZSZXN1bHQgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICBuTGVuZ3RoID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBzQ29sbGVjdGVkVHh0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwYXJzZSBuYW1lc3BhY2UgaW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnhtbG5zICYmIG9YTUxQYXJlbnQubmFtZXNwYWNlVVJJKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLm5hbWVzcGFjZUtleV0gPSBvWE1MUGFyZW50Lm5hbWVzcGFjZVVSSTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwYXJzZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICAvLyB1c2luZyBhdHRyaWJ1dGVzIHByb3BlcnR5IGluc3RlYWQgb2YgaGFzQXR0cmlidXRlcyBtZXRob2QgdG8gc3VwcG9ydCBvbGRlciBicm93c2Vyc1xyXG4gICAgICAgICAgICAgICAgaWYgKG9YTUxQYXJlbnQuYXR0cmlidXRlcyAmJiBvWE1MUGFyZW50LmF0dHJpYnV0ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2QXR0cmlicyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKG5MZW5ndGg7IG5MZW5ndGggPCBvWE1MUGFyZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyBuTGVuZ3RoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9BdHRyaWIgPSBvWE1MUGFyZW50LmF0dHJpYnV0ZXMuaXRlbShuTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdkNvbnRlbnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYk5hbWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnN0cmlwQXR0clByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmliTmFtZSA9IG9BdHRyaWIubmFtZS5yZXBsYWNlKHByZWZpeE1hdGNoLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmliTmFtZSA9IG9BdHRyaWIubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ3Jva0F0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZDb250ZW50W29wdGlvbnMudmFsdWVLZXldID0gdGhpcy5ncm9rVHlwZShvQXR0cmliLnZhbHVlLnJlcGxhY2UodHJpbU1hdGNoLCAnJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdkNvbnRlbnRbb3B0aW9ucy52YWx1ZUtleV0gPSBvQXR0cmliLnZhbHVlLnJlcGxhY2UodHJpbU1hdGNoLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnhtbG5zICYmIG9BdHRyaWIubmFtZXNwYWNlVVJJKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Q29udGVudFtvcHRpb25zLm5hbWVzcGFjZUtleV0gPSBvQXR0cmliLm5hbWVzcGFjZVVSSTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0cnNBc09iamVjdCkgeyAvLyBhdHRyaWJ1dGVzIHdpdGggc2FtZSBsb2NhbCBuYW1lIG11c3QgZW5hYmxlIHByZWZpeGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2QXR0cmlic1thdHRyaWJOYW1lXSA9IHZDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLmF0dHJLZXkgKyBhdHRyaWJOYW1lXSA9IHZDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyc0FzT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy5hdHRyS2V5XSA9IHZBdHRyaWJzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIGlmIChvWE1MUGFyZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG9Ob2RlLCBzUHJvcCwgdkNvbnRlbnQsIG5JdGVtID0gMDsgbkl0ZW0gPCBvWE1MUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBuSXRlbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gb1hNTFBhcmVudC5jaGlsZE5vZGVzLml0ZW0obkl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Ob2RlLm5vZGVUeXBlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tZXJnZUNEQVRBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc0NvbGxlY3RlZFR4dCArPSBvTm9kZS5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2UmVzdWx0Lmhhc093blByb3BlcnR5KG9wdGlvbnMuY2RhdGFLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldLmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLmNkYXRhS2V5XSA9IFt2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldLnB1c2gob05vZGUubm9kZVZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hpbGRyZW5Bc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldLnB1c2gob05vZGUubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy5jZGF0YUtleV0gPSBvTm9kZS5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogbm9kZVR5cGUgaXMgXCJDREFUQVNlY3Rpb25cIiAoNCkgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob05vZGUubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNDb2xsZWN0ZWRUeHQgKz0gb05vZGUubm9kZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8qIG5vZGVUeXBlIGlzIFwiVGV4dFwiICgzKSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvTm9kZS5ub2RlVHlwZSA9PT0gMSkgeyAvKiBub2RlVHlwZSBpcyBcIkVsZW1lbnRcIiAoMSkgKi9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobkxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2luZyBub2RlTmFtZSB0byBzdXBwb3J0IGJyb3dzZXIgKElFKSBpbXBsZW1lbnRhdGlvbiB3aXRoIG5vICdsb2NhbE5hbWUnIHByb3BlcnR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJpcEVsZW1QcmVmaXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzUHJvcCA9IG9Ob2RlLm5vZGVOYW1lLnJlcGxhY2UocHJlZml4TWF0Y2gsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc1Byb3AgPSBvTm9kZS5ub2RlTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Q29udGVudCA9IHhtbFRvSlNPTi5wYXJzZVhNTChvTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZSZXN1bHQuaGFzT3duUHJvcGVydHkoc1Byb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZSZXN1bHRbc1Byb3BdLmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W3NQcm9wXSA9IFt2UmVzdWx0W3NQcm9wXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdLnB1c2godkNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hpbGRyZW5Bc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdLnB1c2godkNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdID0gdkNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5MZW5ndGgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNDb2xsZWN0ZWRUeHQpIHsgLy8gbm8gY2hpbGRyZW4gYW5kIG5vIHRleHQsIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hpbGRyZW5Bc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy50ZXh0S2V5XSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMudGV4dEtleV0ucHVzaChudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMudGV4dEtleV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc0NvbGxlY3RlZFR4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmdyb2tUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ3Jva1R5cGUoc0NvbGxlY3RlZFR4dC5yZXBsYWNlKHRyaW1NYXRjaCwgJycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy50ZXh0S2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm5vcm1hbGl6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMudGV4dEtleV0gPSBzQ29sbGVjdGVkVHh0LnJlcGxhY2UodHJpbU1hdGNoLCAnJykucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLnRleHRLZXldID0gc0NvbGxlY3RlZFR4dC5yZXBsYWNlKHRyaW1NYXRjaCwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdlJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgeG1sRG9jdW1lbnQgdG8gYSBzdHJpbmdcclxuICAgICAgICAgICAgLy8gUmV0dXJucyBudWxsIG9uIGZhaWx1cmVcclxuICAgICAgICAgICAgdGhpcy54bWxUb1N0cmluZyA9IGZ1bmN0aW9uICh4bWxEb2MpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHhtbFN0cmluZyA9IHhtbERvYy54bWwgPyB4bWxEb2MueG1sIDogKG5ldyBYTUxTZXJpYWxpemVyKCkpLnNlcmlhbGl6ZVRvU3RyaW5nKHhtbERvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbFN0cmluZztcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IGEgc3RyaW5nIHRvIFhNTCBOb2RlIFN0cnVjdHVyZVxyXG4gICAgICAgICAgICAvLyBSZXR1cm5zIG51bGwgb24gZmFpbHVyZVxyXG4gICAgICAgICAgICB0aGlzLnN0cmluZ1RvWE1MID0gZnVuY3Rpb24gKHhtbFN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeG1sRG9jID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5ET01QYXJzZXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoeG1sU3RyaW5nLCBcInRleHQveG1sXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbERvYztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWxEb2MgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhtbERvYy5hc3luYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWxEb2MubG9hZFhNTCh4bWxTdHJpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbERvYztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0pLmNhbGwoe30pO1xyXG4gICAgICAgIHJldHVybiB4bWxUb0pTT047XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlICovXHJcbi8vIHBvbHlmaWxsIGZvciBPYmplY3QuYXNzaWduIChub3QgcGFydCBvZiBUUyB5ZXQpXHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cclxuaWYgKCFPYmplY3QuYXNzaWduKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LCBcImFzc2lnblwiLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRTb3VyY2UgPT09IHVuZGVmaW5lZCB8fCBuZXh0U291cmNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0U291cmNlID0gT2JqZWN0KG5leHRTb3VyY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhuZXh0U291cmNlKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0bztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
