var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var redux_1 = require("redux");
var thunkMiddleware = require('redux-thunk');
var angular2_redux_util_1 = require("angular2-redux-util");
var Lib = (function () {
    function Lib() {
    }
    Lib.StoreFactory = function (reducerList) {
        return function () {
            var reducers = redux_1.combineReducers(reducerList);
            var middlewareEnhancer = redux_1.applyMiddleware(thunkMiddleware);
            var isDebug = window.devToolsExtension;
            var applyDevTools = function () { return isDebug ? window.devToolsExtension() : function (f) { return f; }; };
            var enhancers = redux_1.compose(middlewareEnhancer, applyDevTools());
            var createStoreWithEnhancers = enhancers(redux_1.createStore);
            var reduxAppStore = createStoreWithEnhancers(reducers);
            return new angular2_redux_util_1.AppStore(reduxAppStore);
        };
    };
    Lib.insertAt = function (immutable, item, index) {
        var first = immutable.slice(0, index - 1).push(item);
        var second = immutable.slice(index);
        return first.conact(second);
    };
    Lib.LoadComponentAsync = function (name, path) {
        return System.import(path).then(function (c) { return c[name]; });
    };
    Lib.log = function (msg) {
        console.log(new Date().toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1") + ': ' + msg);
    };
    Lib.guid = function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    };
    Lib.Xml2Json = function () {
        var xmlToJSON = (function () {
            this.version = "1.3";
            var options = {
                mergeCDATA: true,
                grokAttr: true,
                grokText: true,
                normalize: true,
                xmlns: true,
                namespaceKey: '_ns',
                textKey: '_text',
                valueKey: '_value',
                attrKey: '_attr',
                cdataKey: '_cdata',
                attrsAsObject: true,
                stripAttrPrefix: true,
                stripElemPrefix: true,
                childrenAsArray: true
            };
            var prefixMatch = new RegExp('(?!xmlns)^.*:/');
            var trimMatch = new RegExp('^\s+|\s+$g');
            this.grokType = function (sValue) {
                if (/^\s*$/.test(sValue)) {
                    return null;
                }
                if (/^(?:true|false)$/i.test(sValue)) {
                    return sValue.toLowerCase() === "true";
                }
                if (isFinite(sValue)) {
                    return parseFloat(sValue);
                }
                return sValue;
            };
            this.parseString = function (xmlString, opt) {
                return this.parseXML(this.stringToXML(xmlString), opt);
            };
            this.parseXML = function (oXMLParent, opt) {
                for (var key in opt) {
                    options[key] = opt[key];
                }
                var vResult = {}, nLength = 0, sCollectedTxt = "";
                if (options.xmlns && oXMLParent.namespaceURI) {
                    vResult[options.namespaceKey] = oXMLParent.namespaceURI;
                }
                if (oXMLParent.attributes && oXMLParent.attributes.length > 0) {
                    var vAttribs = {};
                    for (nLength; nLength < oXMLParent.attributes.length; nLength++) {
                        var oAttrib = oXMLParent.attributes.item(nLength);
                        vContent = {};
                        var attribName = '';
                        if (options.stripAttrPrefix) {
                            attribName = oAttrib.name.replace(prefixMatch, '');
                        }
                        else {
                            attribName = oAttrib.name;
                        }
                        if (options.grokAttr) {
                            vContent[options.valueKey] = this.grokType(oAttrib.value.replace(trimMatch, ''));
                        }
                        else {
                            vContent[options.valueKey] = oAttrib.value.replace(trimMatch, '');
                        }
                        if (options.xmlns && oAttrib.namespaceURI) {
                            vContent[options.namespaceKey] = oAttrib.namespaceURI;
                        }
                        if (options.attrsAsObject) {
                            vAttribs[attribName] = vContent;
                        }
                        else {
                            vResult[options.attrKey + attribName] = vContent;
                        }
                    }
                    if (options.attrsAsObject) {
                        vResult[options.attrKey] = vAttribs;
                    }
                    else {
                    }
                }
                if (oXMLParent.hasChildNodes()) {
                    for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
                        oNode = oXMLParent.childNodes.item(nItem);
                        if (oNode.nodeType === 4) {
                            if (options.mergeCDATA) {
                                sCollectedTxt += oNode.nodeValue;
                            }
                            else {
                                if (vResult.hasOwnProperty(options.cdataKey)) {
                                    if (vResult[options.cdataKey].constructor !== Array) {
                                        vResult[options.cdataKey] = [vResult[options.cdataKey]];
                                    }
                                    vResult[options.cdataKey].push(oNode.nodeValue);
                                }
                                else {
                                    if (options.childrenAsArray) {
                                        vResult[options.cdataKey] = [];
                                        vResult[options.cdataKey].push(oNode.nodeValue);
                                    }
                                    else {
                                        vResult[options.cdataKey] = oNode.nodeValue;
                                    }
                                }
                            }
                        }
                        else if (oNode.nodeType === 3) {
                            sCollectedTxt += oNode.nodeValue;
                        }
                        else if (oNode.nodeType === 1) {
                            if (nLength === 0) {
                                vResult = {};
                            }
                            if (options.stripElemPrefix) {
                                sProp = oNode.nodeName.replace(prefixMatch, '');
                            }
                            else {
                                sProp = oNode.nodeName;
                            }
                            vContent = xmlToJSON.parseXML(oNode);
                            if (vResult.hasOwnProperty(sProp)) {
                                if (vResult[sProp].constructor !== Array) {
                                    vResult[sProp] = [vResult[sProp]];
                                }
                                vResult[sProp].push(vContent);
                            }
                            else {
                                if (options.childrenAsArray) {
                                    vResult[sProp] = [];
                                    vResult[sProp].push(vContent);
                                }
                                else {
                                    vResult[sProp] = vContent;
                                }
                                nLength++;
                            }
                        }
                    }
                }
                else if (!sCollectedTxt) {
                    if (options.childrenAsArray) {
                        vResult[options.textKey] = [];
                        vResult[options.textKey].push(null);
                    }
                    else {
                        vResult[options.textKey] = null;
                    }
                }
                if (sCollectedTxt) {
                    if (options.grokText) {
                        var value = this.grokType(sCollectedTxt.replace(trimMatch, ''));
                        if (value !== null && value !== undefined) {
                            vResult[options.textKey] = value;
                        }
                    }
                    else if (options.normalize) {
                        vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '').replace(/\s+/g, " ");
                    }
                    else {
                        vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '');
                    }
                }
                return vResult;
            };
            this.xmlToString = function (xmlDoc) {
                try {
                    var xmlString = xmlDoc.xml ? xmlDoc.xml : (new XMLSerializer()).serializeToString(xmlDoc);
                    return xmlString;
                }
                catch (err) {
                    return null;
                }
            };
            this.stringToXML = function (xmlString) {
                try {
                    var xmlDoc = null;
                    if (window.DOMParser) {
                        var parser = new DOMParser();
                        xmlDoc = parser.parseFromString(xmlString, "text/xml");
                        return xmlDoc;
                    }
                    else {
                        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                        xmlDoc.async = false;
                        xmlDoc.loadXML(xmlString);
                        return xmlDoc;
                    }
                }
                catch (e) {
                    return null;
                }
            };
            return this;
        }).call({});
        return xmlToJSON;
    };
    Lib.ReduxLoggerMiddleware = function (store) { return function (next) { return function (action) {
        var result = next(action);
        return result;
    }; }; };
    Lib = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Lib);
    return Lib;
})();
exports.Lib = Lib;
if (!Object.assign) {
    Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            "use strict";
            if (target === undefined || target === null) {
                throw new TypeError("Cannot convert first argument to object");
            }
            var to = Object(target);
            for (var i = 1; i < arguments.length; i++) {
                var nextSource = arguments[i];
                if (nextSource === undefined || nextSource === null) {
                    continue;
                }
                nextSource = Object(nextSource);
                var keysArray = Object.keys(nextSource);
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi50cyJdLCJuYW1lcyI6WyJMaWIiLCJMaWIuY29uc3RydWN0b3IiLCJMaWIuU3RvcmVGYWN0b3J5IiwiTGliLmluc2VydEF0IiwiTGliLkxvYWRDb21wb25lbnRBc3luYyIsIkxpYi5sb2ciLCJMaWIuZ3VpZCIsIkxpYi5ndWlkLnM0IiwiTGliLlhtbDJKc29uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSxxQkFBeUIsZUFBZSxDQUFDLENBQUE7QUFDekMsc0JBQXFFLE9BQU8sQ0FBQyxDQUFBO0FBQzdFLElBQVksZUFBZSxXQUFNLGFBQWEsQ0FBQyxDQUFBO0FBQy9DLG9DQUF1QixxQkFBcUIsQ0FBQyxDQUFBO0FBSTdDO0lBQUFBO0lBNlNBQyxDQUFDQTtJQTFTVUQsZ0JBQVlBLEdBQW5CQSxVQUFvQkEsV0FBa0JBO1FBQ2xDRSxNQUFNQSxDQUFDQTtZQUNIQSxJQUFNQSxRQUFRQSxHQUFHQSx1QkFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7WUFFOUNBLElBQU1BLGtCQUFrQkEsR0FBR0EsdUJBQWVBLENBQU1BLGVBQWVBLENBQUNBLENBQUNBO1lBQ2pFQSxJQUFNQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxpQkFBaUJBLENBQUNBO1lBQ3pDQSxJQUFNQSxhQUFhQSxHQUFHQSxjQUFNQSxPQUFBQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQSxpQkFBaUJBLEVBQUVBLEdBQUdBLFVBQUFBLENBQUNBLElBQUlBLE9BQUFBLENBQUNBLEVBQURBLENBQUNBLEVBQTdDQSxDQUE2Q0EsQ0FBQ0E7WUFDMUVBLElBQU1BLFNBQVNBLEdBQUdBLGVBQU9BLENBQUNBLGtCQUFrQkEsRUFBRUEsYUFBYUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDL0RBLElBQU1BLHdCQUF3QkEsR0FBR0EsU0FBU0EsQ0FBQ0EsbUJBQVdBLENBQUNBLENBQUNBO1lBQ3hEQSxJQUFNQSxhQUFhQSxHQUFHQSx3QkFBd0JBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ3pE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Yi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb21tb24gTGlicmFyeSAqKi9cclxuXHJcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnYW5ndWxhcjIvY29yZSc7XHJcbmltcG9ydCB7Y3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2VycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0ICogYXMgdGh1bmtNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXRodW5rJztcclxuaW1wb3J0IHtBcHBTdG9yZX0gZnJvbSBcImFuZ3VsYXIyLXJlZHV4LXV0aWxcIjtcclxuXHJcbmltcG9ydCB7TG9nZ2VyTWlkZGxld2FyZX0gZnJvbSBcImFuZ3VsYXIyLXJlZHV4LXV0aWxcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExpYiB7XHJcblxyXG4gICAgc3RhdGljIFN0b3JlRmFjdG9yeShyZWR1Y2VyTGlzdDpPYmplY3QpIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZWR1Y2VycyA9IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2VyTGlzdCk7XHJcbiAgICAgICAgICAgIC8vY29uc3QgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlKDxhbnk+dGh1bmtNaWRkbGV3YXJlLCBMb2dnZXJNaWRkbGV3YXJlKTsgLy8gdG8gZW5hYmxlIGxvZ2dlclxyXG4gICAgICAgICAgICBjb25zdCBtaWRkbGV3YXJlRW5oYW5jZXIgPSBhcHBseU1pZGRsZXdhcmUoPGFueT50aHVua01pZGRsZXdhcmUpO1xyXG4gICAgICAgICAgICBjb25zdCBpc0RlYnVnID0gd2luZG93LmRldlRvb2xzRXh0ZW5zaW9uO1xyXG4gICAgICAgICAgICBjb25zdCBhcHBseURldlRvb2xzID0gKCkgPT4gaXNEZWJ1ZyA/IHdpbmRvdy5kZXZUb29sc0V4dGVuc2lvbigpIDogZiA9PiBmO1xyXG4gICAgICAgICAgICBjb25zdCBlbmhhbmNlcnMgPSBjb21wb3NlKG1pZGRsZXdhcmVFbmhhbmNlciwgYXBwbHlEZXZUb29scygpKTtcclxuICAgICAgICAgICAgY29uc3QgY3JlYXRlU3RvcmVXaXRoRW5oYW5jZXJzID0gZW5oYW5jZXJzKGNyZWF0ZVN0b3JlKTtcclxuICAgICAgICAgICAgY29uc3QgcmVkdXhBcHBTdG9yZSA9IGNyZWF0ZVN0b3JlV2l0aEVuaGFuY2VycyhyZWR1Y2Vycyk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXBwU3RvcmUocmVkdXhBcHBTdG9yZSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaW5zZXJ0QXQoaW1tdXRhYmxlLCBpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGxldCBmaXJzdCA9IGltbXV0YWJsZS5zbGljZSgwLCBpbmRleCAtIDEpLnB1c2goaXRlbSlcclxuICAgICAgICBsZXQgc2Vjb25kID0gaW1tdXRhYmxlLnNsaWNlKGluZGV4KVxyXG4gICAgICAgIHJldHVybiBmaXJzdC5jb25hY3Qoc2Vjb25kKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgTG9hZENvbXBvbmVudEFzeW5jKG5hbWU6c3RyaW5nLCBwYXRoOnN0cmluZykge1xyXG5cclxuICAgICAgICByZXR1cm4gU3lzdGVtLmltcG9ydChwYXRoKS50aGVuKGMgPT4gY1tuYW1lXSk7XHJcblxyXG4gICAgICAgIC8vIGpzcG0gYnVuZGxlIHNyYy9jb21wcy9hcHAxL0FwcDEuanMgLi9kaXN0L3B1YmxpYy9tYWluLWJ1bmRsZS5qcyAtLXNraXAtc291cmNlLW1hcHMgLS1pbmplY3RcclxuXHJcbiAgICAgICAgLy8gYnVuZGxlczoge1xyXG4gICAgICAgIC8vICAgICBcIm1haW4tYnVuZGxlXCI6IFtcclxuICAgICAgICAvLyAgICAgICAgIFwiZGlzdC9wdWJsaWMvQXBwMVwiLFxyXG4gICAgICAgIC8vICAgICAgICAgXCJtYWluLWJ1bmRsZS9BcHAxXCIsXHJcbiAgICAgICAgLy8gICAgICAgICBcImRpc3QvcHVibGljL0FwcDEudHNcIixcclxuICAgICAgICAvLyAgICAgICAgIFwiL2Rpc3QvcHVibGljL0FwcDFcIixcclxuICAgICAgICAvLyAgICAgICAgIFwiQXBwMVwiLFxyXG4gICAgICAgIC8vICAgICAgICAgXCJwdWJsaWMvQXBwMVwiLFxyXG4gICAgICAgIC8vICAgICAgICAgXCJkaXN0L3B1YmxpYy9BcHAxXCIsXHJcbiAgICAgICAgLy8gICAgICAgICBcInNyYy9jb21wcy9hcHAxL0FwcDEuanNcIlxyXG4gICAgICAgIC8vICAgICBdXHJcbiAgICAgICAgLy8gfSxcclxuXHJcbiAgICAgICAgLy9yZXR1cm4gU3lzdGVtLmltcG9ydCgnL2Rpc3QvcHVibGljL291dC5qcycpXHJcbiAgICAgICAgLy8gICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gICAgICAgIGFsZXJ0KCdwcm9iIGxvYWRpbmcgb3V0LmpzICcgKyBlKTtcclxuICAgICAgICAvLyAgICB9KS50aGVuKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gICAgICAgIGFsZXJ0KGUpO1xyXG4gICAgICAgIC8vICAgICAgICBhbGVydChlW25hbWVdKTtcclxuICAgICAgICAvLyAgICAgICAgYWxlcnQoSlNPTi5zdHJpbmdpZnkoZSkpO1xyXG4gICAgICAgIC8vICAgICAgICByZXR1cm4gU3lzdGVtLmltcG9ydCgnQXBwMScpLnRoZW4oYyA9PiBjW25hbWVdKTtcclxuICAgICAgICAvLyAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbG9nKG1zZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKCkucmVwbGFjZSgvLiooXFxkezJ9OlxcZHsyfTpcXGR7Mn0pLiovLCBcIiQxXCIpICsgJzogJyArIG1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGd1aWQoKTpzdHJpbmcge1xyXG4gICAgICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcclxuICAgICAgICAgICAgICAgIC50b1N0cmluZygxNilcclxuICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArXHJcbiAgICAgICAgICAgIHM0KCkgKyAnLScgKyBzNCgpICsgczQoKSArIHM0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIFJlZHV4TG9nZ2VyTWlkZGxld2FyZSA9IHN0b3JlID0+IG5leHQgPT4gYWN0aW9uID0+IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRpc3BhdGNoaW5nXCIsIGFjdGlvbi50eXBlKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJuZXh0IHN0YXRlXCIsIHN0b3JlLmdldFN0YXRlKCkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIFhtbDJKc29uKCkge1xyXG4gICAgICAgIC8vaHR0cHM6Ly9naXRodWIuY29tL21ldGF0cmliYWwveG1sVG9KU09OXHJcbiAgICAgICAgdmFyIHhtbFRvSlNPTiA9IChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZlcnNpb24gPSBcIjEuM1wiO1xyXG5cclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7IC8vIHNldCB1cCB0aGUgZGVmYXVsdCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBtZXJnZUNEQVRBOiB0cnVlLCAvLyBleHRyYWN0IGNkYXRhIGFuZCBtZXJnZSB3aXRoIHRleHRcclxuICAgICAgICAgICAgICAgIGdyb2tBdHRyOiB0cnVlLCAvLyBjb252ZXJ0IHRydXRoeSBhdHRyaWJ1dGVzIHRvIGJvb2xlYW4sIGV0Y1xyXG4gICAgICAgICAgICAgICAgZ3Jva1RleHQ6IHRydWUsIC8vIGNvbnZlcnQgdHJ1dGh5IHRleHQvYXR0ciB0byBib29sZWFuLCBldGNcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZTogdHJ1ZSwgLy8gY29sbGFwc2UgbXVsdGlwbGUgc3BhY2VzIHRvIHNpbmdsZSBzcGFjZVxyXG4gICAgICAgICAgICAgICAgeG1sbnM6IHRydWUsIC8vIGluY2x1ZGUgbmFtZXNwYWNlcyBhcyBhdHRyaWJ1dGUgaW4gb3V0cHV0XHJcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2VLZXk6ICdfbnMnLCAvLyB0YWcgbmFtZSBmb3IgbmFtZXNwYWNlIG9iamVjdHNcclxuICAgICAgICAgICAgICAgIHRleHRLZXk6ICdfdGV4dCcsIC8vIHRhZyBuYW1lIGZvciB0ZXh0IG5vZGVzXHJcbiAgICAgICAgICAgICAgICB2YWx1ZUtleTogJ192YWx1ZScsIC8vIHRhZyBuYW1lIGZvciBhdHRyaWJ1dGUgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICBhdHRyS2V5OiAnX2F0dHInLCAvLyB0YWcgZm9yIGF0dHIgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICBjZGF0YUtleTogJ19jZGF0YScsIC8vIHRhZyBmb3IgY2RhdGEgbm9kZXMgKGlnbm9yZWQgaWYgbWVyZ2VDREFUQSBpcyB0cnVlKVxyXG4gICAgICAgICAgICAgICAgYXR0cnNBc09iamVjdDogdHJ1ZSwgLy8gaWYgZmFsc2UsIGtleSBpcyB1c2VkIGFzIHByZWZpeCB0byBuYW1lLCBzZXQgcHJlZml4IHRvICcnIHRvIG1lcmdlIGNoaWxkcmVuIGFuZCBhdHRycy5cclxuICAgICAgICAgICAgICAgIHN0cmlwQXR0clByZWZpeDogdHJ1ZSwgLy8gcmVtb3ZlIG5hbWVzcGFjZSBwcmVmaXhlcyBmcm9tIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgIHN0cmlwRWxlbVByZWZpeDogdHJ1ZSwgLy8gZm9yIGVsZW1lbnRzIG9mIHNhbWUgbmFtZSBpbiBkaWZmIG5hbWVzcGFjZXMsIHlvdSBjYW4gZW5hYmxlIG5hbWVzcGFjZXMgYW5kIGFjY2VzcyB0aGUgbnNrZXkgcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQXNBcnJheTogdHJ1ZSAvLyBmb3JjZSBjaGlsZHJlbiBpbnRvIGFycmF5c1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHByZWZpeE1hdGNoOmFueSA9IG5ldyBSZWdFeHAoJyg/IXhtbG5zKV4uKjovJyk7XHJcbiAgICAgICAgICAgIHZhciB0cmltTWF0Y2g6YW55ID0gbmV3IFJlZ0V4cCgnXlxccyt8XFxzKyRnJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdyb2tUeXBlID0gZnVuY3Rpb24gKHNWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKC9eXFxzKiQvLnRlc3Qoc1ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKC9eKD86dHJ1ZXxmYWxzZSkkL2kudGVzdChzVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNWYWx1ZS50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShzVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBzVmFsdWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhcnNlU3RyaW5nID0gZnVuY3Rpb24gKHhtbFN0cmluZywgb3B0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVhNTCh0aGlzLnN0cmluZ1RvWE1MKHhtbFN0cmluZyksIG9wdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VYTUwgPSBmdW5jdGlvbiAob1hNTFBhcmVudCwgb3B0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gb3B0W2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHZSZXN1bHQgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICBuTGVuZ3RoID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBzQ29sbGVjdGVkVHh0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwYXJzZSBuYW1lc3BhY2UgaW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnhtbG5zICYmIG9YTUxQYXJlbnQubmFtZXNwYWNlVVJJKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLm5hbWVzcGFjZUtleV0gPSBvWE1MUGFyZW50Lm5hbWVzcGFjZVVSSTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBwYXJzZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICAvLyB1c2luZyBhdHRyaWJ1dGVzIHByb3BlcnR5IGluc3RlYWQgb2YgaGFzQXR0cmlidXRlcyBtZXRob2QgdG8gc3VwcG9ydCBvbGRlciBicm93c2Vyc1xyXG4gICAgICAgICAgICAgICAgaWYgKG9YTUxQYXJlbnQuYXR0cmlidXRlcyAmJiBvWE1MUGFyZW50LmF0dHJpYnV0ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2QXR0cmlicyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKG5MZW5ndGg7IG5MZW5ndGggPCBvWE1MUGFyZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyBuTGVuZ3RoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9BdHRyaWIgPSBvWE1MUGFyZW50LmF0dHJpYnV0ZXMuaXRlbShuTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdkNvbnRlbnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYk5hbWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnN0cmlwQXR0clByZWZpeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmliTmFtZSA9IG9BdHRyaWIubmFtZS5yZXBsYWNlKHByZWZpeE1hdGNoLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmliTmFtZSA9IG9BdHRyaWIubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZ3Jva0F0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZDb250ZW50W29wdGlvbnMudmFsdWVLZXldID0gdGhpcy5ncm9rVHlwZShvQXR0cmliLnZhbHVlLnJlcGxhY2UodHJpbU1hdGNoLCAnJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdkNvbnRlbnRbb3B0aW9ucy52YWx1ZUtleV0gPSBvQXR0cmliLnZhbHVlLnJlcGxhY2UodHJpbU1hdGNoLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnhtbG5zICYmIG9BdHRyaWIubmFtZXNwYWNlVVJJKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Q29udGVudFtvcHRpb25zLm5hbWVzcGFjZUtleV0gPSBvQXR0cmliLm5hbWVzcGFjZVVSSTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXR0cnNBc09iamVjdCkgeyAvLyBhdHRyaWJ1dGVzIHdpdGggc2FtZSBsb2NhbCBuYW1lIG11c3QgZW5hYmxlIHByZWZpeGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2QXR0cmlic1thdHRyaWJOYW1lXSA9IHZDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLmF0dHJLZXkgKyBhdHRyaWJOYW1lXSA9IHZDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hdHRyc0FzT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy5hdHRyS2V5XSA9IHZBdHRyaWJzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIGlmIChvWE1MUGFyZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG9Ob2RlLCBzUHJvcCwgdkNvbnRlbnQsIG5JdGVtID0gMDsgbkl0ZW0gPCBvWE1MUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBuSXRlbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9Ob2RlID0gb1hNTFBhcmVudC5jaGlsZE5vZGVzLml0ZW0obkl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9Ob2RlLm5vZGVUeXBlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tZXJnZUNEQVRBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc0NvbGxlY3RlZFR4dCArPSBvTm9kZS5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2UmVzdWx0Lmhhc093blByb3BlcnR5KG9wdGlvbnMuY2RhdGFLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldLmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLmNkYXRhS2V5XSA9IFt2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldLnB1c2gob05vZGUubm9kZVZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hpbGRyZW5Bc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMuY2RhdGFLZXldLnB1c2gob05vZGUubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy5jZGF0YUtleV0gPSBvTm9kZS5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLyogbm9kZVR5cGUgaXMgXCJDREFUQVNlY3Rpb25cIiAoNCkgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob05vZGUubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNDb2xsZWN0ZWRUeHQgKz0gb05vZGUubm9kZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8qIG5vZGVUeXBlIGlzIFwiVGV4dFwiICgzKSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvTm9kZS5ub2RlVHlwZSA9PT0gMSkgeyAvKiBub2RlVHlwZSBpcyBcIkVsZW1lbnRcIiAoMSkgKi9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobkxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2luZyBub2RlTmFtZSB0byBzdXBwb3J0IGJyb3dzZXIgKElFKSBpbXBsZW1lbnRhdGlvbiB3aXRoIG5vICdsb2NhbE5hbWUnIHByb3BlcnR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJpcEVsZW1QcmVmaXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzUHJvcCA9IG9Ob2RlLm5vZGVOYW1lLnJlcGxhY2UocHJlZml4TWF0Y2gsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc1Byb3AgPSBvTm9kZS5ub2RlTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Q29udGVudCA9IHhtbFRvSlNPTi5wYXJzZVhNTChvTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZSZXN1bHQuaGFzT3duUHJvcGVydHkoc1Byb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZSZXN1bHRbc1Byb3BdLmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W3NQcm9wXSA9IFt2UmVzdWx0W3NQcm9wXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdLnB1c2godkNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hpbGRyZW5Bc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdLnB1c2godkNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbc1Byb3BdID0gdkNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5MZW5ndGgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNDb2xsZWN0ZWRUeHQpIHsgLy8gbm8gY2hpbGRyZW4gYW5kIG5vIHRleHQsIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hpbGRyZW5Bc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy50ZXh0S2V5XSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMudGV4dEtleV0ucHVzaChudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMudGV4dEtleV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc0NvbGxlY3RlZFR4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmdyb2tUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ3Jva1R5cGUoc0NvbGxlY3RlZFR4dC5yZXBsYWNlKHRyaW1NYXRjaCwgJycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZSZXN1bHRbb3B0aW9ucy50ZXh0S2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm5vcm1hbGl6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2UmVzdWx0W29wdGlvbnMudGV4dEtleV0gPSBzQ29sbGVjdGVkVHh0LnJlcGxhY2UodHJpbU1hdGNoLCAnJykucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdlJlc3VsdFtvcHRpb25zLnRleHRLZXldID0gc0NvbGxlY3RlZFR4dC5yZXBsYWNlKHRyaW1NYXRjaCwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdlJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgeG1sRG9jdW1lbnQgdG8gYSBzdHJpbmdcclxuICAgICAgICAgICAgLy8gUmV0dXJucyBudWxsIG9uIGZhaWx1cmVcclxuICAgICAgICAgICAgdGhpcy54bWxUb1N0cmluZyA9IGZ1bmN0aW9uICh4bWxEb2MpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHhtbFN0cmluZyA9IHhtbERvYy54bWwgPyB4bWxEb2MueG1sIDogKG5ldyBYTUxTZXJpYWxpemVyKCkpLnNlcmlhbGl6ZVRvU3RyaW5nKHhtbERvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbFN0cmluZztcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IGEgc3RyaW5nIHRvIFhNTCBOb2RlIFN0cnVjdHVyZVxyXG4gICAgICAgICAgICAvLyBSZXR1cm5zIG51bGwgb24gZmFpbHVyZVxyXG4gICAgICAgICAgICB0aGlzLnN0cmluZ1RvWE1MID0gZnVuY3Rpb24gKHhtbFN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeG1sRG9jID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5ET01QYXJzZXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoeG1sU3RyaW5nLCBcInRleHQveG1sXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbERvYztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWxEb2MgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhtbERvYy5hc3luYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWxEb2MubG9hZFhNTCh4bWxTdHJpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhtbERvYztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0pLmNhbGwoe30pO1xyXG4gICAgICAgIHJldHVybiB4bWxUb0pTT047XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlICovXHJcbi8vIHBvbHlmaWxsIGZvciBPYmplY3QuYXNzaWduIChub3QgcGFydCBvZiBUUyB5ZXQpXHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cclxuaWYgKCFPYmplY3QuYXNzaWduKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LCBcImFzc2lnblwiLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRTb3VyY2UgPT09IHVuZGVmaW5lZCB8fCBuZXh0U291cmNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0U291cmNlID0gT2JqZWN0KG5leHRTb3VyY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhuZXh0U291cmNlKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0bztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
