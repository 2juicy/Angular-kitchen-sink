{"version":3,"file":"StoreModel.js","sourceRoot":"","sources":["StoreModel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;YAYA;gBAMI,oBAAY,IAAa;oBAAb,oBAAa,GAAb,SAAa;oBACrB,IAAI,CAAC,KAAK,GAAG,eAAG,CAAc,IAAI,CAAC,CAAC;gBACxC,CAAC;gBANM,mBAAQ,GAAf;oBACI,MAAM,CAAC,oBAAI,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC;gBAQM,2BAAM,GAAb,UAAiB,SAAa,EAAE,GAAU,EAAE,KAAS;oBACjD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAM,CAAC;gBACpE,CAAC;gBAEM,2BAAM,GAAb,UAAc,GAAU;oBACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC/B,CAAC;gBAEM,4BAAO,GAAd,UAAkB,SAAS,EAAE,IAAQ;oBACjC,sBAAsB,SAAyB,EAAE,IAAQ;wBACrD,IAAI,OAAO,GAAK,IAAI,SAAS,CAAC,eAAG,CAAc,IAAI,CAAC,CAAC,CAAC;wBACtD,MAAM,CAAC,OAAO,CAAC;oBACnB,CAAC;oBAED,MAAM,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBACzC,CAAC;gBAEM,4BAAO,GAAd;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;gBACtB,CAAC;gBAEL,iBAAC;YAAD,CAAC,AAjCD,IAiCC;YAjCD,mCAiCC,CAAA","sourcesContent":["import {Map} from 'immutable';\r\nimport { UUID } from 'angular2-uuid';\r\n\r\n\r\n/**\r\n * StoreModel is a thin wrapper of Immutable data around for a Class\r\n * uses the internal immutable map to hold all values.\r\n * This allows us a base class on which we can extend and inject\r\n * into any Redux store as we follow Immutability\r\n *\r\n * Also ships with a helper static method to create unique IDs\r\n **/\r\nexport class StoreModel {\r\n\r\n    static UniqueId(){\r\n        return UUID.UUID();\r\n    }\r\n\r\n    constructor(data:any = {}) {\r\n        this._data = Map<string, any>(data);\r\n    }\r\n\r\n    _data:Map<string, any>;\r\n\r\n    public setKey<T>(ClassName:any, key:string, value:any):T {\r\n        return this.setData(ClassName, this._data.set(key, value)) as T;\r\n    }\r\n\r\n    public getKey(key:string) {\r\n        return this._data.get(key);\r\n    }\r\n\r\n    public setData<T>(ClassName, data:any):T {\r\n        function ClassFactory(className:{new(data): T;}, data:any):T {\r\n            var created:T = new className(Map<string, any>(data));\r\n            return created;\r\n        }\r\n\r\n        return ClassFactory(ClassName, data);\r\n    }\r\n\r\n    public getData():Map<string, any> {\r\n        return this._data;\r\n    }\r\n\r\n}"]}