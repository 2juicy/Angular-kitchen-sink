{"version":3,"file":"RefreshTheme.js","sourceRoot":"","sources":["RefreshTheme.ts"],"names":[],"mappings":";;;;;;;;;;;YAEA;gBACI;oBACI,UAAU,CAAC,UAAA,CAAC;wBACR,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;4BACzB,QAAQ,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,cAAM,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,CAAC,YAAY,EAAE,CAAC;wBACrF,CAAC;oBACL,CAAC,EAAE,EAAE,CAAC,CAAC;gBACX,CAAC;gBACL,mBAAC;YAAD,CAAC,AARD,IAQC;YARD,uCAQC,CAAA","sourcesContent":["import {CommBroker} from \"../services/CommBroker\";\r\nimport {Consts} from \"../Conts\";\r\nexport class RefreshTheme {\r\n    constructor() {\r\n        setTimeout(e=> {\r\n            if (document['commBroker']) {\r\n                document['commBroker'].getService(Consts.Services().StyleService).refreshTheme();\r\n            }\r\n        }, 50);\r\n    }\r\n}\r\n\r\n// example below of doing class decoration, which we can't use because we need to inject\r\n// in constructor as well, so we must extend...\r\n\r\n//export function RefreshTheme(theme:string) {\r\n//    return function <TFunction extends Function>(Target:TFunction):TFunction {\r\n//        var newConstructor = function () {\r\n//            Target.apply(this);\r\n//            Object.freeze(this);\r\n//        };\r\n//        newConstructor.prototype = Object.create(Target.prototype);\r\n//        newConstructor.prototype.constructor = Target;\r\n//        return <any> newConstructor;\r\n//    }\r\n//}\r\n\r\n"]}