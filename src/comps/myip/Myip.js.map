{"version":3,"file":"Myip.js","sourceRoot":"","sources":["Myip.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAyBA;gBAII,cAAoB,IAAS;oBAJjC,iBAmCC;oBA/BuB,SAAI,GAAJ,IAAI,CAAK;oBAKzB,IAAI,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC,SAAS,CAAC,UAAC,MAAM;wBACrE,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;oBACjD,CAAC,CAAC,CAAC;oBAEH,UAAU,CAAC,UAAA,CAAC;wBACR,KAAI,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC,SAAS,CAAC,UAAA,MAAM;4BACpE,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;wBACjD,CAAC,CAAC,CAAC;oBACP,CAAC,EAAE,IAAI,CAAC,CAAA;gBACZ,CAAC;gBAOD,sBAAO,GAAP,UAAQ,GAAG;oBAAX,iBASC;oBARG,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,MAAM,CAAC,uBAAU,CAAC,MAAM,CAAC,UAAC,QAAQ;wBAC9B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC;4BAChB,KAAI,CAAC,OAAO,GAAG,IAAI,2BAAY,EAAc,CAAC;4BAC9C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,KAAI,CAAC,OAAO,CAAQ,CAAC,CAAC;wBACxD,CAAC;wBACD,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAC5C,CAAC,CAAC,CAAC;gBACP,CAAC;gBAhDL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,MAAM;wBAChB,QAAQ,EAAE,yoBAU2E;qBACxF,CAAC;;wBAAA;gBAoCF,WAAC;YAAD,CAAC,AAnCD,IAmCC;YAnCD,uBAmCC,CAAA","sourcesContent":["import {Component} from \"@angular/core\";\r\nimport {Consts} from \"../../Conts\";\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {AsyncSubject} from \"rxjs/AsyncSubject\";\r\nimport {Http} from '@angular/http';\r\n\r\ninterface IIpAddress {\r\n    ip:string;\r\n}\r\n\r\n@Component({\r\n    selector: 'MyIp',\r\n    template: `\r\n                <h3>Your ip address is: {{ipAddress}}</h3>\r\n                <small>I am MyIp component</small>\r\n                <!--\r\n                 This is an example of providing a default template only if one is not provided by consumer of\r\n                 the component's ng-content template \r\n                -->\r\n                total children in ng-content: {{contentWrap.childNodes.length}}\r\n                <div #contentWrap><ng-content></ng-content></div>\r\n                <div class=\"timer\" *ngIf=\"contentWrap.childNodes.length === 1\">\r\n                  <div class=\"time\"> TOTAL {{contentWrap.childNodes.length}}</div></div>`\r\n})\r\nexport class MyIp {\r\n    private ipAddress:string;\r\n    private subject:AsyncSubject<IIpAddress>;\r\n\r\n    constructor(private http:Http) {\r\n\r\n        // Demonstrates AsyncSubject where the first call will go out to server to grab your\r\n        // ip, but 2nd call (via timeout) will grab it directly from the Subject never needing\r\n        // to hit the server a second time (well unless this whole component gets re-instantiated that is)\r\n        this.getMyIp('https://secure.digitalsignage.com/getIp').subscribe((result) => {\r\n            this.ipAddress = JSON.parse(result._body).ip;\r\n        });\r\n\r\n        setTimeout(e=> {\r\n            this.getMyIp('https://secure.digitalsignage.com/getIp').subscribe(result=> {\r\n                this.ipAddress = JSON.parse(result._body).ip;\r\n            });\r\n        }, 2000)\r\n    }\r\n\r\n    /**\r\n     Using getMyIp we take advantage of AsyncSubject to retrieve data from server only once\r\n     as your ip does noy change per session. AsyncSubject is kind of like a Promise as it resolves\r\n     once and remembers and emits its last value\r\n     **/\r\n    getMyIp(url) {\r\n        var self = this;\r\n        return Observable.create((observer) => {\r\n            if (!this.subject) {\r\n                this.subject = new AsyncSubject<IIpAddress>();\r\n                self.http.get(url).subscribe((this.subject) as any);\r\n            }\r\n            return this.subject.subscribe(observer);\r\n        });\r\n    }\r\n}\r\n\r\n"]}