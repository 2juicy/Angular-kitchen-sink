{"version":3,"file":"Filemenu.js","sourceRoot":"","sources":["Filemenu.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA0CA;gBAQI,kBAAY,aAA+B,EAA4B,GAAG,EAAU,MAAc,EAAU,cAA8B,EAAE,UAAsB;oBAA3F,QAAG,GAAH,GAAG,CAAA;oBAAU,WAAM,GAAN,MAAM,CAAQ;oBAAU,mBAAc,GAAd,cAAc,CAAgB;oBACtI,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;oBAC/B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;oBAClB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;oBAC1B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;oBACnC,IAAI,CAAC,EAAE,GAAG,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC;oBAC9C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;oBAEjF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,eAAgC;wBAC1D,MAAM,CAAC;oBAsBX,CAAC,CAAC,CAAA;oBAuCF,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC;wBACtB,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC;gBAgBP,CAAC;gBAYO,qCAAkB,GAA1B,UAA2B,KAAK;oBAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;wBACnB,YAAY,EAAE,IAAI;wBAClB,KAAK,EAAE,cAAM,CAAC,MAAM,EAAE,CAAC,cAAc;wBACrC,OAAO,EAAE,IAAI;wBACb,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;qBAC7B,CAAC,CAAC;oBACH,KAAK,CAAC,cAAc,EAAE,CAAC;oBACvB,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAEM,kCAAe,GAAtB,UAAuB,MAAoB;oBACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9B,CAAC;gBAhJL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,UAAU;wBACpB,MAAM,EAAE,CAAC,WAAW,CAAC;wBACrB,QAAQ,EAAE,4uBAiBT;qBACJ,CAAC;+BASgD,aAAM,CAAC,2BAAQ,CAAC;;4BAThE;gBA4HF,eAAC;YAAD,CAAC,AA3HD,IA2HC;YA3HD,+BA2HC,CAAA","sourcesContent":["import {\r\n    Component,\r\n    ViewContainerRef,\r\n    Inject\r\n} from \"@angular/core\";\r\nimport {FilemenuItem} from \"./FilemenuItem\";\r\nimport {\r\n    Router,\r\n    ActivatedRoute,\r\n    NavigationStart\r\n} from \"@angular/router\";\r\nimport {CommBroker} from \"../../services/CommBroker\";\r\nimport {Consts} from \"../../Conts\";\r\nimport {DOCUMENT} from \"@angular/platform-browser\";\r\n\r\n/**\r\n Filemenu manages the top header file menu per application as it mutates it's content depending\r\n on which App has loaded\r\n @class Filemenu\r\n **/\r\n@Component({\r\n    selector: 'Filemenu',\r\n    inputs: ['appPrefix'],\r\n    template: `\r\n        <div>\r\n             <div class=\"m_fileMenuWrap\">\r\n                <ul class=\"nav navbar-nav\" >\r\n                <li id=\"commonFileMenu\" class=\"hidden-lg\" dropdown>\r\n                  <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">Navigatior<b class=\"caret\"></b></a>\r\n                  <ul class=\"dropdown-menu\">\r\n                  <li class=\"divider\"></li>\r\n                    <li *ngFor=\"let item of m_renderedItems\" (click)=\"listenMenuSelected($event)\">\r\n                       <a href=\"#\">{{item.title}}</a>\r\n                    </li>\r\n                    <li class=\"divider\"></li>\r\n                  </ul>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class Filemenu {\r\n    private m_items: FilemenuItem[];\r\n    private m_renderedItems: any[];\r\n    private m_fileMenuWrap: any;\r\n    private m_commBroker: CommBroker;\r\n    private el: any;\r\n    private viewContainer: ViewContainerRef;\r\n\r\n    constructor(viewContainer: ViewContainerRef, @Inject(DOCUMENT) private dom, private router: Router, private activatedRoute: ActivatedRoute, commBroker: CommBroker) {\r\n        var self = this;\r\n        self.m_commBroker = commBroker;\r\n        self.m_items = [];\r\n        self.m_renderedItems = [];\r\n        self.viewContainer = viewContainer;\r\n        self.el = viewContainer.element.nativeElement;\r\n        self.m_fileMenuWrap = self.dom.getElementsByClassName(self.el, 'm_fileMenuWrap');\r\n\r\n        this.router.events.subscribe((navigationStart: NavigationStart) => {\r\n            return;\r\n            // var currentRoute:string = this.router.serializeUrl(navigationStart.url);\r\n            // currentRoute = currentRoute.replace(/\\//,'');\r\n            // self.m_renderedItems = [];\r\n            // for (var item in self.m_items) {\r\n            //     if (self.m_items[item]['app'] == currentRoute)\r\n            //         self.m_renderedItems.push(self.m_items[item]);\r\n            // }\r\n            // if (self.m_renderedItems.length == 0) {\r\n            //     jQuery(self.m_fileMenuWrap).fadeOut('slow', function () {\r\n            //         //notify ng2 of the changes so we comply with change strategy\r\n            //         self.dom.setStyle(self.el, 'opacity', '0');\r\n            //     });\r\n            // } else {\r\n            //     jQuery(self.m_fileMenuWrap).fadeIn('slow', function () {\r\n            //         //notify ng2 of the changes so we comply with change strategy\r\n            //         self.dom.setStyle(self.el, 'opacity', '1');\r\n            //     });\r\n            //\r\n            //     let app:App = self.m_commBroker.getService(Consts.Services().App);\r\n            //     app.appResized();\r\n            // }\r\n        })\r\n\r\n\r\n        // const teamActivatedRoute = router.routerState(activeRoute);\r\n        // var teamId = teamActivatedRoute.params.map(r => r.id);\r\n\r\n        // var sub = this.activeRoute\r\n        //     .params\r\n        //     .subscribe(params => {\r\n        //         let id = +params['id'];\r\n        //     });\r\n        // this.router.events.subscribe((urlTree:UrlTree)=>{\r\n        //     console.log(urlTree);\r\n        // })\r\n\r\n        // router.changes.subscribe(function (currentRoute) {\r\n        // //router.subscribe(function (currentRoute) {\r\n        //     self.m_renderedItems = [];\r\n        //     for (var item in self.m_items) {\r\n        //         if (self.m_items[item]['app'] == currentRoute)\r\n        //             self.m_renderedItems.push(self.m_items[item]);\r\n        //     }\r\n        //     if (self.m_renderedItems.length == 0) {\r\n        //         jQuery(self.m_fileMenuWrap).fadeOut('slow', function () {\r\n        //             //notify ng2 of the changes so we comply with change strategy\r\n        //             self.dom.setStyle(self.el, 'opacity', '0');\r\n        //         });\r\n        //     } else {\r\n        //         jQuery(self.m_fileMenuWrap).fadeIn('slow', function () {\r\n        //             //notify ng2 of the changes so we comply with change strategy\r\n        //             self.dom.setStyle(self.el, 'opacity', '1');\r\n        //         });\r\n        //\r\n        //         let app:App = self.m_commBroker.getService(Consts.Services().App);\r\n        //         app.appResized();\r\n        //     }\r\n        //     //console.log(`Route ${currentRoute}`);\r\n        // });\r\n\r\n        jQuery('.navbar-nav').css({\r\n            display: 'block'\r\n        });\r\n\r\n\r\n        //setTimeout(()=>{\r\n        //    var menu = commBroker.getService() as Menu;\r\n        //},4000);\r\n\r\n\r\n        /** just some example of what can be done with direct dom manipulation **/\r\n        //this.dom.removeChild(this.el, bar);\r\n        //this.background = this.dom.getAttribute(this.el, 'background') || '#000000';\r\n        //this.opacity = this.dom.setAttribute(this.el, 'background', 'red');\r\n        //this.width = this.dom.getAttribute(this.el, 'width') || '7px';\r\n        //this.position = this.dom.getAttribute(this.el, 'position') || 'right';\r\n        //jQuery('.navicons').show();\r\n        //jQuery(\".navbar-header .navbar-toggle\").trigger(\"click\");\r\n    }\r\n\r\n    //ngAfterViewInit() {\r\n    //    Lib.log(`AppPrefix: ${this['appPrefix']}`);\r\n    //    jQuery('.flip').mouseenter(function () {\r\n    //        jQuery(this).find('.flipcard').addClass('flipped').mouseleave(function () {\r\n    //            jQuery(this).removeClass('flipped');\r\n    //        });\r\n    //        return false;\r\n    //    });\r\n    //}\r\n\r\n    private listenMenuSelected(event) {\r\n        this.m_commBroker.fire({\r\n            fromInstance: self,\r\n            event: Consts.Events().MENU_SELECTION,\r\n            context: null,\r\n            message: event.target.text\r\n        });\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    public addFileMenuItem(i_item: FilemenuItem): void {\r\n        this.m_items.push(i_item);\r\n    }\r\n}\r\n"]}