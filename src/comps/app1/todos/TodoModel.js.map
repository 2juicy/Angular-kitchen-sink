{"version":3,"file":"TodoModel.js","sourceRoot":"","sources":["TodoModel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;YAKA;gBAA+B,6BAAU;gBAErC,mBAAY,IAAa;oBAAb,oBAAa,GAAb,SAAa;oBACrB,kBAAM,IAAI,CAAC,CAAC;gBAChB,CAAC;gBAIM,+BAAW,GAAlB,UAAmB,GAAU,EAAE,KAAS;oBACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAc,CAAC;gBAC5E,CAAC;gBAKM,8BAAU,GAAjB,UAAkB,EAAS;oBACvB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAY,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;gBAC5D,CAAC;gBAGM,8BAAU,GAAjB;oBACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAClC,CAAC;gBAED,oCAAgB,GAAhB,UAAiB,IAAS;oBAAT,oBAAS,GAAT,QAAQ,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAY,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;gBAC9D,CAAC;gBAEL,gBAAC;YAAD,CAAC,AA5BD,CAA+B,uBAAU,GA4BxC;YA5BD,iCA4BC,CAAA","sourcesContent":["import {StoreModel} from \"../../../models/StoreModel\";\r\n\r\n/**\r\n * Thin wrapper of Immutable data around a single model\r\n * **/\r\nexport class TodoModel extends StoreModel {\r\n\r\n    constructor(data:any = {}) {\r\n        super(data);\r\n    }\r\n\r\n    // a wrapper around base class public setKey<T>(ClassName:any, key:string, value:any):T {...\r\n    // so we don't have to pass in the generic every time\r\n    public setModelKey(key:string, value:any):TodoModel {\r\n        return this.setData(TodoModel, this._data.set(key, value)) as TodoModel;\r\n    }\r\n\r\n    // this is a great way to add specific functionality to your model and getting free\r\n    // type checking for your specific model needs. It also simplifies the call as\r\n    // we don't need to pass generics\r\n    public setModelId(id:string){\r\n        return this.setKey<TodoModel>(TodoModel, 'modelId', id);\r\n    }\r\n\r\n    // wrapper function specific to this model\r\n    public getModelId(){\r\n        return this.getKey('modelId');\r\n    }\r\n\r\n    invalidateTodoId(i_id = -1) {\r\n        return this.setKey<TodoModel>(TodoModel, 'modelId', i_id);\r\n    }\r\n\r\n}"]}