{"version":3,"file":"TodoService.js","sourceRoot":"","sources":["TodoService.ts"],"names":[],"mappings":"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","sourcesContent":["/** An example of how to provide a service manually that depends on other services\r\n as well as example of factory, use providers: [ ... when inside a component\r\n or via a pure provide (... if not!\r\n\r\n while this may not be the best way to architect your application, we still use\r\n it here as code sample:\r\n\r\n examples 1 via component decoration:\r\n ====================================\r\n providers: [\r\n provide (TodoService, {\r\n                useFactory: (todoAction, http, todoStatsModel, appStore) => {\r\n                    return new todoAction(TodoAction, http, todoStatsModel, appStore)\r\n                },\r\n                deps: [TodoAction, Http, TodoStatsModel, AppStore]\r\n            })\r\n ]\r\n\r\n examples 2 in controller\r\n ====================================\r\n var p = provide (TodoService, {\r\n            useFactory: (todoAction, http, todoStatsModel, appStore) => {\r\n                return new todoAction(TodoAction, http, todoStatsModel, appStore)\r\n            },\r\n            deps: [TodoAction, TodoStatsModel, AppStore]\r\n        })\r\n\r\n examples 3 in controller\r\n ====================================\r\n **/\r\n\r\nimport {\r\n    Injectable,\r\n    ReflectiveInjector\r\n} from \"@angular/core\";\r\nimport {Http} from \"@angular/http\";\r\nimport {Lib} from \"../../../Lib\";\r\nimport \"rxjs/add/operator/share\";\r\nimport TodoStatsModel from \"./TodoStatsModel\";\r\nimport {TodoModel} from \"./TodoModel\";\r\nimport {\r\n    AppStore,\r\n    Actions\r\n} from \"angular2-redux-util\";\r\nimport {CommBroker} from \"../../../services/CommBroker\";\r\n\r\nexport const ADD_TODO = 'ADD_TODO';\r\nexport const REMOVE_TODO = 'REMOVE_TODO';\r\nexport const EDIT_TODO = 'EDIT_TODO';\r\nexport const CLEAR_TODOS = 'CLEAR_TODOS';\r\n\r\n// debug server\r\n//const url:string = 'http://secure.digitalsignage.com:8080';\r\nconst url: string = 'http://secure.digitalsignage.com';\r\n\r\nexport class TodoItemModel {\r\n    private task: String;\r\n    private id: string;\r\n\r\n    constructor(text: String, id?: string) {\r\n        this.task = text;\r\n        this.id = id || Lib.guid();\r\n    }\r\n\r\n    get text() {\r\n        console.log('getting value for task', this.task);\r\n        return this.task;\r\n    }\r\n\r\n    set text(value) {\r\n        this.task = value;\r\n    }\r\n\r\n    getTask() {\r\n        return this.task;\r\n    }\r\n}\r\n\r\nexport interface IDataStore {\r\n    todos: Array<TodoItemModel>\r\n}\r\n\r\n@Injectable()\r\nexport class TodoService extends Actions {\r\n    private m_dataStore: IDataStore;\r\n    private m_addTodoDispatch: Function;\r\n    private m_clearTodoDispatch: Function;\r\n    private newOrderNumber: number = 9999\r\n\r\n    constructor(private _http: Http, private todoStatsModel: TodoStatsModel, private appStore: AppStore) {\r\n        super();\r\n        this.m_dataStore = {todos: []};\r\n        this.m_addTodoDispatch = this.createDispatcher(this.addTodoDispatch, this.appStore);\r\n        this.m_clearTodoDispatch = this.createDispatcher(this.clearTodoDispatch, this.appStore);\r\n    }\r\n\r\n    /**\r\n     *  factoryTodoService\r\n     *  example of todo service creator\r\n     * @returns {any}\r\n     */\r\n    private factoryTodoService():TodoService {\r\n        var injector = ReflectiveInjector.resolveAndCreate(\r\n            [\r\n                TodoService,\r\n                TodoStatsModel,\r\n                {provide: CommBroker, useClass: CommBroker},\r\n                {provide: AppStore, useValue: this.appStore}\r\n            ]);\r\n        return injector.get(TodoService);\r\n    }\r\n\r\n    public saveTodoRemote(todo: TodoModel, cb: (status: number)=>void) {\r\n        this.todoStatsModel.creates++;\r\n        let sendData = JSON.stringify(todo);\r\n        this._http.post(`${url}/todos`, sendData)\r\n            .map(response => response.json()).subscribe(sendData => {\r\n            cb(1);\r\n        }, error => {\r\n            console.log('Could not create todo.');\r\n            cb(-1);\r\n        });\r\n    }\r\n\r\n    public loadTodosRemote(cb: (status: number)=>void) {\r\n        this.m_clearTodoDispatch();\r\n        this.todoStatsModel.reads++;\r\n        this._http.get(`${url}/todos`).map(response => response.json()).subscribe(data => {\r\n            try {\r\n                data = JSON.parse(data);\r\n                cb(1);\r\n            } catch (e) {\r\n                cb(-1);\r\n                return;\r\n            }\r\n            for (var i in data) {\r\n                var todoModel: TodoModel = new TodoModel({\r\n                    task: data[i]._data.task,\r\n                    modelId: data[i]._data.modelId,\r\n                    order: i\r\n                });\r\n                this.m_addTodoDispatch(todoModel);\r\n            }\r\n        }, error => console.log(`Could not load todos ${error}`));\r\n    }\r\n\r\n    public removeTodoRemote(todoModel: TodoModel, cb: (status: number)=>void) {\r\n        this.todoStatsModel.deletes++;\r\n        var modelId = todoModel.getKey('modelId');\r\n        this._http.delete(`${url}/todos/${modelId}`).subscribe(response => {\r\n            if (response.status == 200) {\r\n                cb(1)\r\n            } else {\r\n                cb(-1);\r\n            }\r\n        }, error => console.log('Could not delete todo.'));\r\n    }\r\n\r\n    public editTodoRemote(todoModel: TodoModel, cb: (status: number)=>void) {\r\n        this.todoStatsModel.updates++;\r\n        var modelId = todoModel.getKey('modelId');\r\n        var data = JSON.stringify(todoModel);\r\n        this._http.put(`${url}/todos/${modelId}`, data).subscribe(response => {\r\n            if (response.status == 200) {\r\n                cb(1)\r\n            } else {\r\n                cb(-1);\r\n            }\r\n        }, error => console.log('Could not update todo.'));\r\n    }\r\n\r\n    public addTodo(task: string, id?: string) {\r\n        return (dispatch) => {\r\n            let modelId = id || _.uniqueId();\r\n            var todoModel: TodoModel = new TodoModel({\r\n                task,\r\n                modelId,\r\n                order: this.newOrderNumber++\r\n            });\r\n            this.saveTodoRemote(todoModel, (status: number)=> {\r\n                if (status == -1) {\r\n                    bootbox.alert('problem saving to server 1');\r\n                    return;\r\n                }\r\n                //dispatch({type: ADD_TODO, todoModel: todoModel});\r\n                dispatch(this.addTodoDispatch(todoModel));\r\n            });\r\n        }\r\n    }\r\n\r\n    public addTodoDispatch(todoModel: TodoModel) {\r\n        return {\r\n            type: ADD_TODO,\r\n            todoModel: todoModel\r\n        };\r\n    }\r\n\r\n    public clearTodoDispatch() {\r\n        return {type: CLEAR_TODOS};\r\n    }\r\n\r\n    public removeTodo(todoModel: TodoModel) {\r\n        return (dispatch) => {\r\n            this.removeTodoRemote(todoModel, (status: number)=> {\r\n                if (status == -1) {\r\n                    bootbox.alert('problem saving to server 2');\r\n                    return;\r\n                }\r\n                dispatch(this.removeTodoDispatch(todoModel));\r\n            });\r\n        }\r\n    }\r\n\r\n    public removeTodoDispatch(todoModel: TodoModel) {\r\n        return {\r\n            type: REMOVE_TODO,\r\n            modelId: todoModel.getKey('modelId')\r\n        };\r\n    }\r\n\r\n    public editTodo(todoModel: TodoModel) {\r\n        return (dispatch) => {\r\n            dispatch(this.editTodoDispatch(todoModel));\r\n            dispatch(this.editTodoOrderDispatch(todoModel));\r\n            this.editTodoRemote(todoModel, (status: number)=> {\r\n                if (status == -1) {\r\n                    bootbox.alert('problem saving to server 3');\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public editTodoDispatch(todoModel: TodoModel) {\r\n        return {\r\n            type: EDIT_TODO,\r\n            modelId: todoModel.getKey('modelId'),\r\n            key: 'task',\r\n            value: todoModel['task']\r\n        };\r\n    }\r\n\r\n    public editTodoOrderDispatch(todoModel: TodoModel) {\r\n        return {\r\n            type: EDIT_TODO,\r\n            modelId: todoModel.getKey('modelId'),\r\n            key: 'order',\r\n            value: todoModel.getKey('order')\r\n        };\r\n    }\r\n}\r\n"]}