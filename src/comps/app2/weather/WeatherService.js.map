{"version":3,"file":"WeatherService.js","sourceRoot":"","sources":["WeatherService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YASA;gBAGI,wBAAoB,IAAS;oBAAT,SAAI,GAAJ,IAAI,CAAK;gBAC7B,CAAC;gBAED,+BAAM,GAAN,UAAO,KAAY;oBAOf,MAAM,CAAC,IAAI,CAAC,IAAI;yBACX,GAAG,CAAC,KAAG,cAAc,CAAC,QAAQ,GAAG,KAAO,CAAC;yBACzC,EAAE,CAAC,UAAA,CAAC;wBACD,OAAO,CAAC,GAAG,CAAC,uBAAqB,CAAC,CAAC,MAAQ,CAAC,CAAA;oBAChD,CAAC,CAAC;yBACD,GAAG,CAAC,UAAC,GAAO,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;yBAC5B,GAAG,CAAC,UAAC,CAAC;wBACH,IAAI,KAAK,GAAuB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;wBAClD,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC,CAAC;yBACD,KAAK,CAAC,UAAU,CAAC;wBACd,MAAM,CAAC,uBAAU,CAAC,KAAK,EAAE,CAAC;oBAC9B,CAAC,CAAC,CAAC;gBAEX,CAAC;gBA1BM,uBAAQ,GAAU,4CAA4C,CAAC;gBAF1E;oBAAC,iBAAU,EAAE;;kCAAA;gBA6Bb,qBAAC;YAAD,CAAC,AA5BD,IA4BC;YA5BD,2CA4BC,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Http, RequestOptions, URLSearchParams} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/observable/empty'\r\nimport 'rxjs/add/observable/empty'\r\nimport {IWeatherItem} from \"./IWeather\";\r\n\r\n@Injectable()\r\nexport class WeatherService {\r\n    static BASE_URL:string = 'https://secure.digitalsignage.com/Weather/';\r\n\r\n    constructor(private http:Http) {\r\n    }\r\n\r\n    search(query:string):Observable<any> {\r\n        // if you wish to use ?q=param_here you can use\r\n        //const search:URLSearchParams = new URLSearchParams();\r\n        //search.set('q', query);\r\n        //return this.http.get(`${WeatherService.BASE_URL}`, new RequestOptions({search}))\r\n\r\n        // do is a great way to trace for debugging Observables\r\n        return this.http\r\n            .get(`${WeatherService.BASE_URL}${query}`)\r\n            .do(x => {\r\n                console.log(`Weather response: ${x.status}`)\r\n            })\r\n            .map((res:any) => res.json())\r\n            .map((e) => {\r\n                var items:Array<IWeatherItem> = e[0].data.weather;\r\n                return items;\r\n            })\r\n            .catch(function (e) {\r\n                return Observable.empty();\r\n            });\r\n        //.map((item: Array<{item: IWeatherItem}>) => item.map((item: {show: IWeatherItem}));\r\n    }\r\n}"]}