{"version":3,"file":"Contact.js","sourceRoot":"","sources":["Contact.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwCA;gBAEI,iBAAoB,UAAqB;oBAArB,eAAU,GAAV,UAAU,CAAW;oBAIlC,SAAI,GAAQ;wBACf,IAAI,EAAE,MAAM;wBACZ,OAAO,EAAE;4BACL,QAAQ,EAAE,iBAAiB;4BAC3B,QAAQ,EAAE,MAAM;yBACnB;qBACJ,CAAA;oBAOO,aAAQ,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,sBAAsB,CAAC,CAAC;oBACnE,UAAK,GAAG,IAAI,qBAAS,CAAC,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;oBACtF,cAAS,GAAG,KAAK,CAAC;oBAlBd,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,cAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBACpF,CAAC;gBAUM,sBAAI,GAAX,UAAY,IAAS,EAAE,OAAe;oBAClC,KAAK,CAAC,aAAW,OAAO,SAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAG,CAAC,CAAC;gBAExD,CAAC;gBAoBD,0BAAQ,GAAR,UAAS,KAAK;oBACV,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;wBAC9B,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBAC5C,CAAC;gBAzEL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,SAAS;wBACnB,QAAQ,EAAE,YAAY;wBACtB,QAAQ,EAAE,2BAAe;wBACzB,MAAM,EAAE,CAAC,mSAUL,CAAC;qBACR,CAAC;;2BAAA;gBA2DF,cAAC;YAAD,CAAC,AAzCD,IAyCC;YAzCD,6BAyCC,CAAA","sourcesContent":["import {Component} from \"@angular/core\";\r\nimport {Consts} from \"../../../../src/Conts\";\r\nimport {FormGroup} from \"@angular/forms\";\r\nimport {MailModel} from \"../../../models/MailModel\";\r\nimport {CommBroker} from \"../../../services/CommBroker\";\r\nimport  ContactTemplate from './Contact.html!text';\r\n\r\n@Component({\r\n    selector: 'Contact',\r\n    moduleId: __moduleName,\r\n    template: ContactTemplate,\r\n    styles: [`\r\n            .ng-invalid {\r\n              border-left: 5px solid #a94442; /* red */\r\n           }\r\n           .ng-valid[required] {\r\n                  border-left: 5px solid #42A948; /* green */\r\n           }\r\n           .form-control {\r\n                width: 20%;\r\n           }\r\n       `]\r\n})\r\n\r\n/**\r\n The Contact component demonstrates the usage of forms.\r\n Usage is implicit as done purely through the View.\r\n\r\n this is a template-driven approach which allows us to build forms with very little code\r\n to use reactive approach see Notes1 component\r\n\r\n Suggestion: I recommend you use explicit Form creation via\r\n manual instance creation of Controls\r\n\r\n ref::\r\n http://blog.thoughtram.io/angular/2016/03/21/template-driven-forms-in-angular-2.html\r\n http://blog.thoughtram.io/angular/2016/06/22/model-driven-forms-in-angular-2.html\r\n\r\n **/\r\n\r\nexport class Contact {\r\n\r\n    constructor(private commBroker:CommBroker) {\r\n        this.commBroker.getService(Consts.Services().Properties).setPropView('Contact');\r\n    }\r\n\r\n    public user:User = {\r\n        name: 'John',\r\n        address: {\r\n            address1: '11, High Street',\r\n            postcode: '1234'\r\n        }\r\n    }\r\n\r\n    public save(form:User, isValid:boolean) {\r\n        alert(`status: ${isValid} ${JSON.stringify(form)}`);\r\n\r\n    }\r\n\r\n    private contacts = ['Call me', 'Email me', 'Page me (old school)'];\r\n    model = new MailModel(1, 'your name', true, this.contacts[0], 'how can we help you?');\r\n    submitted = false;\r\n    registerForm:FormGroup;\r\n\r\n\r\n    // ngOnInit() {\r\n    //     this.registerForm = this.formBuilder.group({\r\n    //         firstname: [],\r\n    //         lastname: [],\r\n    //         address: this.formBuilder.group({\r\n    //             street: [],\r\n    //             zip: [],\r\n    //             city: []\r\n    //         })\r\n    //     });\r\n    // }\r\n\r\n    onChange(event) {\r\n        if (event.target.value.length < 3)\r\n            alert('text too short for subject');\r\n    }\r\n}\r\n\r\n\r\nexport interface User {\r\n    name:string;\r\n    address?:{\r\n        address1?:string;\r\n        postcode?:string;\r\n    }\r\n}"]}