{"version":3,"file":"Notes3.js","sourceRoot":"","sources":["Notes3.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA8JA;gBAA4B,0BAAS;gBAIjC,gBAAsB,WAAuB,EAAY,UAAqB;oBAC1E,kBAAM,WAAW,EAAE,UAAU,CAAC,CAAC;oBADb,gBAAW,GAAX,WAAW,CAAY;oBAAY,eAAU,GAAV,UAAU,CAAW;oBAFtE,SAAI,GAAG,IAAI,CAAC;oBACZ,mBAAc,GAAG,aAAa,CAAC;oBAGnC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;oBACf,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;oBAC1B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAC/B,CAAC;gBAED,+BAAc,GAAd;oBACI,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;gBAC3B,CAAC;gBAED,2BAAU,GAAV,UAAW,SAAS,EAAE,KAAK;oBACvB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;gBACpC,CAAC;gBAzKL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,QAAQ;wBAClB,SAAS,EAAE,CAAC,6CAAqB,CAAC;wBAClC,MAAM,EAAE;4BACJ,kEAGE;yBACL;wBACD,QAAQ,EAAE,g6OA4I4B;qBACzC,CAAC;;0BAAA;gBAoBF,aAAC;YAAD,CAAC,AAlBD,CAA4B,qBAAS,GAkBpC;YAlBD,2BAkBC,CAAA","sourcesContent":["import {Component} from \"@angular/core\";\nimport {Sliderpanel} from \"../../sliderpanel/Sliderpanel\";\nimport {CommBroker} from \"../../../services/CommBroker\";\nimport {NotesBase} from \"./NotesBase\";\nimport {DynaFactoryResService} from \"./DynaFactoryResService\";\n\n@Component({\n    selector: 'Notes3',\n    providers: [DynaFactoryResService],\n    styles: [\n        `\n        .colorBlue span {\n            color: blue;\n        }`\n    ],\n    template: ` <button type=\"button\" (click)=\"onPrev($event)\" class=\"btn btn-default btn-sm\">\n                    <span class=\"fa fa-arrow-left\"></span>\n                </button>\n                <button type=\"button\" (click)=\"onNext($event)\" class=\"btn btn-default btn-sm\">\n                    <span class=\"fa fa-arrow-right\"></span>\n                </button>\n                <hr/>\n                <small>I am notes3 component</small>\n                <!-- style is really cool as we can externally style components via ngStyle -->\n                 <mini-tabs [style]=\"{'color': '#333333', 'backgroundColor': 'dodgerblue'}\">\n                  <mini-tab [tabTitle]=\"'Code 1'\">\n                    <h3>example of http search</h3>\n                    <StarWarsSearch></StarWarsSearch>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 2'\">\n                    <h3>example of wiki search</h3>directive             <WikiSearch></WikiSearch>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 3'\">\n                    <h3>infinity scroll</h3>\n                     <InfinityScroll></InfinityScroll>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 4'\">\n                    <h3>Clock</h3>\n                     <Clock></Clock>\n                     <hr/>\n                     <h4>MouseWheel directive</h4>\n                     <h5>Scroll with mouse wheel to show direction</h5>\n                     <div mouseWheel (mouseWheelUp)=\"mouseWheel('up',$event)\" (mouseWheelDown)=\"mouseWheel('down',$event)\">\n                        <textarea>{{wheelDirection}}</textarea>                    \n                     </div>\n                  </mini-tab>       \n                  <mini-tab [tabTitle]=\"'Code 5'\">\n                    <h3>Multi Slot Transclusion</h3>\n                    <MultiSlotTransclusion>\n                    <h1>THIS WILL NOT APPEAR ANYWHERE AS NO MATCHING TAG EXISTS ON H1</h1>\n                    <h1 header>This is a Heading</h1>\n                      <p body>This is body</p>\n                      <div footer>\n                        <hr>\n                        <h3>This is a footer</h3>\n                      </div>\n                    </MultiSlotTransclusion>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 6'\">\n                    <h3>Embed Template view</h3>\n                    <EmbedView></EmbedView>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 7'\">\n                    <h3>Component builder</h3>\n                    <CompElemBuilder></CompElemBuilder>\n                  </mini-tab>\n                   <mini-tab [tabTitle]=\"'Code 8'\">\n                    <h3>Using a Differ to Dynamically create and Render Templates</h3>\n                    <CreateEmbedDiffer></CreateEmbedDiffer>\n                  </mini-tab>                   \n                  <mini-tab [tabTitle]=\"'Code 9'\">\n                    <h3>Using two way binding into a component (custom banana in a box)</h3>\n                    <pre><![CDATA[\n                      [(on)]=\"state\" // so you can use other banana in a box and not just [(ngModel)] \n                    ]]></pre>\n                    <ToggleButtonApp></ToggleButtonApp>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 10'\">\n                    <h3>Streaming buttons via BehaviorSubject</h3>\n                    <StreamButton></StreamButton>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 11'\">\n                    <h3>Custom ng template directive *ngBookRepeat</h3>\n                    <ngBookRepeatSample></ngBookRepeatSample>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 12'\">\n                    <h3>Injecting compileModuleAndAllComponentsSync component</h3>\n                    <InjectTemplateParent></InjectTemplateParent>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 13'\">\n                    <h3>Tooltip injecting template</h3>\n                    <h2 class=\"colorBlue\">\n                        Hover for a tooltip on the\n                        <span [tooltip]=\"{position:'left'}\">\n                            left\n                            <template #tooltipTemplate>\n                                I'm a popover box!\n                            </template>\n                        </span>,\n                        <span [tooltip]=\"{position:'right'}\">\n                            right\n                            <template #tooltipTemplate>\n                                I'm a popover box!\n                            </template>\n                        </span>,\n                        <span [tooltip]=\"{position:'top'}\">\n                            top\n                            <template #tooltipTemplate>\n                                I'm a popover box!\n                            </template>\n                        </span>, or \n                        <span [tooltip]=\"{position:'bottom'}\">\n                            bottom\n                            <template #tooltipTemplate>\n                                I'm a popover box!\n                            </template>\n                        </span>\n                    </h2>\n                  </mini-tab>                  \n                  <mini-tab [tabTitle]=\"'Code 14'\">                  \n                    <optionsList></optionsList> \n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 15'\">\n                    <h3>Dynamic factory resolver</h3>\n                    <DynaFactoryRes></DynaFactoryRes>  \n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 16'\">\n                    <dynamic-app></dynamic-app>  \n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 17'\">\n                        <h3>provide data to ngFor declaratively via contentChildren</h3>\n                        <ContentHeroes>\n                            <ContentHero id=\"1\" name=\"Superman\"></ContentHero>\n                            <ContentHero id=\"2\" name=\"Batman\"></ContentHero>\n                            <ContentHero id=\"3\" name=\"Batgirl\"></ContentHero>\n                            <ContentHero id=\"3\" name=\"Robin\"></ContentHero>\n                            <ContentHero id=\"4\" name=\"Flash\"></ContentHero>\n                            <ContentHero id=\"5\" name=\"Green Lantern\"></ContentHero>\n                        </ContentHeroes>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 18'\">\n                    <h3>provide components to ngFor declaratively via contentChildren</h3>\n                    <h6>Polymorphic Component Container using ContentChildren</h6>\n                    <content-bar-app></content-bar-app>\n                  </mini-tab>\n                  <mini-tab [tabTitle]=\"'Code 19'\">\n                    <h3>Show / hide powered by *showIfLoggedIn directive</h3>\n                    <div *showHideDirective=\"show\"d>\n                        <h6>now you can see me</h6>\n                    </div>\n                    <button class=\"btn\" (click)=\"toggleShowHide()\" >toggle</button>\n                  </mini-tab>\n                </mini-tabs>\n                    \n                <small>I am a Minitab component (@ContentChildren)</small>\n                <ng-content></ng-content>`\n})\n\nexport class Notes3 extends NotesBase {\n\n    private show = true;\n    private wheelDirection = 'wheel me in';\n    constructor(protected sliderPanel:Sliderpanel, protected commBroker:CommBroker) {\n        super(sliderPanel, commBroker);\n        this.me = this;\n        this.slideLeft = 'notes4';\n        this.slideRight = 'notes2';\n    }\n\n    toggleShowHide(){\n        this.show = !this.show;\n    }\n\n    mouseWheel(direction, event){\n        this.wheelDirection = direction;\n    }\n}\n\n\n"]}