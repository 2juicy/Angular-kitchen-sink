{"version":3,"file":"Notes5.js","sourceRoot":"","sources":["Notes5.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAsBA;gBACI,sBAA+C,MAA6B;oBAA7B,WAAM,GAAN,MAAM,CAAuB;gBAC5E,CAAC;gBAED,sCAAe,GAAf;oBACI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBACzC,CAAC;gBAPL;oBAAC,iBAAU,EAAE;+BAEI,aAAM,CAAC,kBAAkB,CAAC;;gCAF9B;gBAQb,mBAAC;YAAD,CAAC,AAPD,IAOC;YAmCD;gBAA4B,0BAAS;gBACjC,gBAAoB,YAA0B,EAAY,WAAwB,EAAY,UAAsB;oBAChH,kBAAM,WAAW,EAAE,UAAU,CAAC,CAAC;oBADf,iBAAY,GAAZ,YAAY,CAAc;oBAAY,gBAAW,GAAX,WAAW,CAAa;oBAAY,eAAU,GAAV,UAAU,CAAY;oBAEhH,YAAY,CAAC,eAAe,EAAE,CAAC;oBAC/B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;oBACf,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAC/B,CAAC;gBAED;oBAAC,gBAAS,CAAC,iBAAiB,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;;+DAAA;gBA9B3D;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,QAAQ;wBAClB,SAAS,EAAE;4BACP,YAAY,EAAE;gCACV,OAAO,EAAE,kBAAkB;gCAC3B,QAAQ,EAAE,EAAC,WAAW,EAAE,8CAA8C,EAAC;6BAC1E,CAAC;wBACN,QAAQ,EAAE,unBAaG;qBAChB,CAAC;;0BAAA;gBAUF,aAAC;YAAD,CAAC,AATD,CAA4B,qBAAS,GASpC;YATD,2BASC,CAAA","sourcesContent":["import {\r\n    Component,\r\n    Inject,\r\n    Injectable,\r\n    ViewContainerRef,\r\n    ViewChild\r\n} from \"@angular/core\";\r\nimport {Sliderpanel} from \"../../sliderpanel/Sliderpanel\";\r\nimport {CommBroker} from \"../../../services/CommBroker\";\r\nimport {NotesBase} from \"./NotesBase\";\r\n\r\n\r\n/**\r\n * In this example I show to to pass parameters to a service that is being injected using\r\n * the dependency injection in angular2.\r\n * The NotesService gets injected into the Notes5 component, and it is passed in\r\n * a constructor parameter value of 'example of passing param to component via DI'.\r\n * This is powerful as it lets us\r\n * instantiate components through the angular DI system with params.\r\n */\r\n\r\n@Injectable()\r\nclass NotesService {\r\n    constructor(@Inject(\"NotesConfigValue\") public config: {noteDefault: string}) {\r\n    }\r\n\r\n    showConfigValue() {\r\n        console.log(this.config.noteDefault);\r\n    }\r\n}\r\n/**\r\n Demonstrating that shows how to create a directive just like\r\n the *ngFor or *ngIf of ng2, and in our case *CountDown.\r\n\r\n What this means is that we are able to manually create a template\r\n and using viewContainer.createEmbeddedView(this.templateRef) we  bind\r\n the template into the component.\r\n\r\n While in practicality we mostly use <ng-content> to achieve the same effect\r\n it still a great example into the inner workings of ng2.\r\n */\r\n\r\n@Component({\r\n    selector: 'Notes5',\r\n    providers: [// NotesService get's provided with a noteDefault\r\n        NotesService, {\r\n            provide: 'NotesConfigValue',\r\n            useValue: {noteDefault: 'example of passing param to component via DI'}\r\n        }],\r\n    template: `<button type=\"button\" (click)=\"onPrev($event)\" class=\"btn btn-default btn-sm\">\r\n                    <span class=\"fa fa-arrow-left \"></span>\r\n                </button>\r\n                <hr/>\r\n                <small>I am Notes5 component..</small>\r\n                <span #extensionAnchor></span>\r\n                <hr/>\r\n                <h5>Example of ngAnimate with enter / leave states</h5>\r\n                <AnimateCards></AnimateCards>\r\n                <hr/>\r\n                <h5>Example of ngAnimate with default state animations</h5>\r\n                <AnimateBox></AnimateBox>\r\n                 <hr/>\r\n                `\r\n})\r\nexport class Notes5 extends NotesBase {\r\n    constructor(private NotesService: NotesService, protected sliderPanel: Sliderpanel, protected commBroker: CommBroker) {\r\n        super(sliderPanel, commBroker);\r\n        NotesService.showConfigValue();\r\n        this.me = this;\r\n        this.slideRight = 'notes4';\r\n    }\r\n\r\n    @ViewChild('extensionAnchor', {read: ViewContainerRef}) extensionAnchor: ViewContainerRef;\r\n}\r\n\r\n\r\n\r\n"]}