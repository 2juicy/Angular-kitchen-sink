{"version":3,"file":"DiggLoader.js","sourceRoot":"","sources":["DiggLoader.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwBA;gBAGI,oBAAoB,IAAS;oBAAT,SAAI,GAAJ,IAAI,CAAK;oBACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACvB,CAAC;gBAED,8BAAS,GAAT,UAAU,MAAU,EAAE,KAAa;oBAC/B,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;oBAa9B,IAAI,CAAC,GAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC/E,CAAC,CAAC,QAAQ,CAAC,UAAC,GAAG;wBACX,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;wBACtB,MAAM,CAAC,uBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACjC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,IAAU;wBAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChD,MAAM,CAAC,IAAI,CAAC;wBAChB,CAAC;oBACL,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAO;wBAC1B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACP,CAAC;gBA3CL;oBAAC,iBAAU,EAAE;;8BAAA;gBA4Cb,iBAAC;YAAD,CAAC,AAjCD,IAiCC;YAjCD,mCAiCC,CAAA","sourcesContent":["import {Component, Injectable} from \"@angular/core\";\r\nimport {Http} from \"@angular/http\";\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/observable/from';\r\nimport 'rxjs/add/operator/mergeMap';\r\nimport 'rxjs/add/operator/retry';\r\nimport {Observable} from \"rxjs/Observable\";\r\n\r\nexport interface IDigg {\r\n    title:string;\r\n    subject:string;\r\n}\r\n\r\n@Injectable()\r\n/**\r\n * This service is a thin wrapper around Http, used to fetch a\r\n * list of Diggs\r\n *\r\n * The service will automatically unwrap the response and return\r\n * an array of Diggs\r\n *\r\n * If the request fails once, the service will indiscriminately\r\n * retry the request with the same value.\r\n */\r\nexport class DiggLoader {\r\n    private m_http:Http;\r\n\r\n    constructor(private http:Http) {\r\n        this.m_http = http;\r\n    }\r\n\r\n    loadDiggs(filter:any, diggs:IDigg[]) {\r\n        filter = filter.toLowerCase();\r\n\r\n        // Another options is to use jsonp if no CORS support via:\r\n        // jsonp.get('https://secure.digitalsignage.com/Digg?callback=JSONP_CALLBACK').map(res...\r\n\r\n        // and another search params and request options:\r\n        // let searchParams = new URLSearchParams();\r\n        // searchParams.set('sort', 'ascending');\r\n        // let options = new RequestOptions({search: searchParams});\r\n        // this.m_http.get('https://secure.digitalsignage.com/Digg', options) .subscribe(response => {\r\n        //     console.log(response.text());\r\n        // });\r\n\r\n        let s:any = this.m_http.get('https://secure.digitalsignage.com/Digg').retry(2);\r\n        s.mergeMap((res)=> {\r\n            let news = res.json();\r\n            return Observable.from(news);\r\n        }).filter(function (data:IDigg) {\r\n            if (data.title.toLowerCase().indexOf(filter) > -1) {\r\n                return true;\r\n            }\r\n        }).subscribe(function (v:IDigg) {\r\n            diggs.push(v);\r\n        });\r\n    }\r\n}"]}