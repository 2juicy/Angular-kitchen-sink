{"version":3,"file":"LoginPanel.js","sourceRoot":"","sources":["LoginPanel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAkBA;gBAMI,cAAY,GAAQ;oBAChB,IAAI,CAAC,EAAE,GAAG,GAAG,IAAI,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;oBACzC,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,WAAW,CAAC;oBAC3C,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;oBAClC,IAAI,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC;gBAC9C,CAAC;gBACL,WAAC;YAAD,CAAC,AAZD,IAYC;YAZD,uBAYC,CAAA;YA4BD;gBAMI,oBAAoB,QAAiB,EAAE,MAAa,EAAU,UAAqB;oBAA/D,aAAQ,GAAR,QAAQ,CAAS;oBAAyB,eAAU,GAAV,UAAU,CAAW;oBAa/E,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;oBACvB,IAAI,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,cAAM,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC;oBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;oBACvB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;oBAEvB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,UAAC,UAAU,EAAE,MAAM,EAAE,MAAM;wBACvD,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;oBACvE,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;gBA+BvB,CAAC;gBAEO,6BAAQ,GAAhB,UAAiB,MAAa,EAAE,MAAa;oBACzC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACnB,CAAC;gBAEO,4BAAO,GAAf;oBAAA,iBAYC;oBAXG,OAAO,CAAC,MAAM,CAAC;wBACX,WAAW,EAAE,KAAK;wBAClB,KAAK,EAAE,gCAAgC;wBACvC,OAAO,EAAE,GAAG;qBACf,CAAC,CAAC;oBACH,UAAU,CAAC,UAAC,CAAC;wBACT,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wBACxC,OAAO,CAAC,OAAO,EAAE,CAAC;oBACtB,CAAC,EAAE,GAAG,CAAC,CAAC;oBACR,KAAK,CAAC,cAAc,EAAE,CAAC;oBACvB,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,sBAAW,iCAAS;yBAApB,UAAqB,IAAW;wBAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACrB,CAAC;;;mBAAA;gBAED,6BAAQ,GAAR;gBACA,CAAC;gBAGD,gCAAW,GAAX;oBACI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACjB,CAAC;gBAjHL;oBAAC,iBAAU,EAAE;oBACZ,gBAAS,CAAC;wBACP,QAAQ,EAAE,YAAY;wBACtB,QAAQ,EAAE,ugDAqBiE;qBAC9E,CAAC;;8BAAA;gBAyFF,iBAAC;YAAD,CAAC,AAxFD,IAwFC;YAxFD,mCAwFC,CAAA","sourcesContent":["import {Component, Injectable} from '@angular/core';\r\nimport {CommBroker} from \"../../services/CommBroker\";\r\nimport {Consts} from \"../../Conts\";\r\nimport {Router} from \"@angular/router\";\r\nimport 'rxjs/add/observable/from';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/bufferCount';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/scan';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/observable/range';\r\nimport {Subject} from \"rxjs/Subject\";\r\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {AppStore} from \"angular2-redux-util\";\r\nimport * as bootbox from 'bootbox';\r\n\r\nexport class User {\r\n    public id:string;\r\n    public name:string;\r\n    public pass:string;\r\n    public gender:string;\r\n\r\n    constructor(obj?:any) {\r\n        this.id = obj && obj.id || Math.random();\r\n        this.name = obj && obj.name || 'anonymous';\r\n        this.pass = obj && obj.pass || '';\r\n        this.gender = obj && obj.gender || 'male';\r\n    }\r\n}\r\n\r\n@Injectable()\r\n@Component({\r\n    selector: 'LoginPanel',\r\n    template: `\r\n                <div id=\"appLogin\" style=\"\">\r\n                  <form class=\"form-signin\" role=\"form\">\r\n                    <h2 class=\"form-signin-heading\"></h2>\r\n                    <input #userName id=\"userName\" type=\"text\" value=\"{{user}}\" class=\"form-control\" data-localize=\"username\" placeholder=\"Type anything\" required autofocus>\r\n                    <input #userPass id=\"userPass\" type=\"password\" value=\"{{pass}}\" class=\"form-control\" data-localize=\"password\" placeholder=\"Type anything\" required>\r\n                    <label class=\"checkbox\">\r\n                      <input id=\"rememberMe\" type=\"checkbox\" checked value=\"remember-me\">\r\n                      <span> Remember me </span></label>\r\n                    <button id=\"loginButton\" (click)=\"authUser(userName.value, userPass.value)\" class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\r\n                      Sign in\r\n                    </button>\r\n                    <hr class=\"hrThin\"/>\r\n                    <a [routerLink]=\"['/ForgotPass']\">Forgot password</a>\r\n                    <div id=\"languageSelectionLogin\"></div>\r\n                  </form>\r\n                </div>\r\n\r\n                <!-- <a [routerLink]=\"['/EntryPanelNoId', {id: 123}']\">To forgot pass</a> -->\r\n                <!-- <a [routerLink]=\"['/App1']\">Direct to App1</a><br/> -->\r\n                <!-- <a [routerLink]=\"['/App2']\">Direct to App2</a><br/> -->\r\n                <small>I am Login component and I am inside EntryPanel</small>`\r\n})\r\nexport class LoginPanel {\r\n    private user:string;\r\n    private pass:string;\r\n    private myRouter:Router;\r\n    private unsub:Function;\r\n\r\n    constructor(private appStore:AppStore, router:Router, private commBroker:CommBroker) {\r\n\r\n        // // const currentUrlTree: UrlTree = router.urlTree;\r\n        // root segment\r\n        // // const root: UrlSegment = currentUrlTree.root;\r\n        // you can get the first child or the list of children of a segment\r\n        // // const firstChild: UrlSegment = currentUrlTree.firstChild(root);\r\n        // matrix parameters of a segment\r\n        // // const params: {[key:string]:string} = firstChild.parameters;\r\n        // // const path: string = firstChild.path;\r\n        // // You can also serialize the tree back into a string.\r\n        // const url: string = router.serializeUrl(currentUrlTree);\r\n\r\n        this.myRouter = router;\r\n        var user = commBroker.getValue(Consts.Values().USER_NAME);\r\n        this.user = user || '';\r\n        this.pass = user || '';\r\n\r\n        this.unsub = appStore.subscribe((objectPath, oldVal, newVal) => {\r\n            console.log('%s changed from %s to %s', objectPath, oldVal, newVal)\r\n        }, 'notify', true);\r\n\r\n        // more examples of subscribing to store\r\n        //\r\n        // useIsEqual is set to true for deep Map equality\r\n        // appStore.subscribe((objectPath, oldVal, newVal) => {\r\n        //     console.log('%s changed from %s to %s', objectPath, oldVal, newVal)\r\n        // }, 'notify', true);\r\n        //\r\n        // useIsEqual is set to false for normal equality\r\n        // var ubsub = appStore.subscribe((objectPath, oldVal, newVal) => {\r\n        // }, 'notify.data', false);\r\n        //\r\n        // with casting\r\n        // this.ubsub = appStore.subscribe((path, prev, value:Map<string,any>) => {\r\n        //     if (value.get('credentials').authenticated)\r\n        //         this.onLogin();\r\n        // }, 'appdb', false);\r\n        //\r\n        // this is a shorthand version which allows you to just receive back the changes\r\n        // this.ubsub = appStore.sub((appdb:Map<string,any>) => {\r\n        //     var status = appdb.get('credentials').get('authenticated');\r\n        //     var user = appdb.get('credentials').get('user');\r\n        //     var pass = appdb.get('credentials').get('pass');\r\n        //     if (status)\r\n        //         this.onLogin();\r\n        // }, 'appdb', false);\r\n        //\r\n        // var ubsub = appStore.subscribe((state)=> {\r\n        // })\r\n\r\n    }\r\n\r\n    private authUser(i_user:string, i_pass:string){\r\n        this.onLogin();\r\n    }\r\n\r\n    private onLogin() {\r\n        bootbox.dialog({\r\n            closeButton: false,\r\n            title: \"Please wait, Authenticating...\",\r\n            message: \" \"\r\n        });\r\n        setTimeout((e)=> {\r\n            this.myRouter.navigate(['/AppManager']);\r\n            bootbox.hideAll();\r\n        }, 200);\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    public set loginName(name:string) {\r\n        this.user = name;\r\n    }\r\n\r\n    toString() {\r\n    }\r\n\r\n    // important, be sure to remember to unsubscribe from store subscriptions to prevent leaks\r\n    ngOnDestroy() {\r\n        this.unsub();\r\n    }\r\n}\r\n\r\n\r\n"]}