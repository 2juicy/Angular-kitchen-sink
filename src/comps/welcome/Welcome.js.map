{"version":3,"file":"Welcome.js","sourceRoot":"","sources":["Welcome.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAyBA;gBAII;oBACI,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;oBAKrC,IAAI,CAAC,kBAAkB,CAAC;wBACpB,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;wBACvB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBAClB,CAAC,CAAA;gBACN,CAAC;gBAEO,oCAAkB,GAA1B,UAA2B,EAA+D;wBAA/D,4BAA+D,EAA9D,oBAAO,EAAE,oBAAO;gBAE5C,CAAC;gBAED,0BAAQ,GAAR;gBACA,CAAC;gBAzCL;oBAAC,gBAAS,CAAC;wBACP,MAAM,EAAE,CAAC,uEAIR,CAAC;wBACF,QAAQ,EAAE,oyBAYG;qBAChB,CAAC;;2BAAA;gBA+EF,cAAC;YAAD,CAAC,AA9ED,IA8EC;YA9ED,6BA8EC,CAAA","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\r\n/**\r\n General route links\r\n @class Welcome\r\n **/\r\n@Component({\r\n    styles: [`\r\n        #routerLinks {\r\n            padding: 20px;\r\n        }\r\n    `],\r\n    template: `\r\n                <div id=\"routerLinks\">\r\n                    <h4>Direct router shortcut links:</h4>\r\n                    <a [routerLink]=\"['/EntryPanelNoId/Login']\">To Login screen</a><br/>\r\n                    <a [routerLink]=\"['/Login', {id: 'Sean-Levy'}, 'Login']\">To Login screen with demo user args</a><br/>\r\n                    <a [routerLink]=\"['/ForgotPass']\">To Forgot Password screen</a><br/>\r\n                    <a [routerLink]=\"['/AppManager']\">To App manager</a><br/>\r\n                    <a [routerLink]=\"['/App1']\">To App1</a><br/>\r\n                    <a [routerLink]=\"['/App2']\">To App2</a><br/>\r\n                    <a [routerLink]=\"['/App3']\">To App3</a><br/>\r\n                    <br/><small>I am Welcome component</small>\r\n                </div>\r\n                `\r\n})\r\nexport class Welcome implements OnInit {\r\n    private someId:string;\r\n\r\n    //constructor(params:RouteParams) {\r\n    constructor() {\r\n        this.someId = 'App1' + Math.random();\r\n\r\n        // an example of passing a optional, typed object instead\r\n        // of using the old way of: opts || opts = {} and it auto maps\r\n        // matching fields\r\n        this.showTypedObjectArg({\r\n            styles1: ['foo', 'bar'], // optional\r\n            styles2: [1, 2] // optional\r\n        })\r\n    }\r\n\r\n    private showTypedObjectArg({styles1, styles2}: {styles1?:string[], styles2?:number[]} = {}) {\r\n        //console.log(styles1 + ' ' + styles2);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    /** component life cycles **/\r\n    //ngOnInit() {\r\n    //    console.log(1);\r\n    //}\r\n\r\n    //ngOnDestroy() {\r\n    //    console.log(2);\r\n    //}\r\n\r\n    /** The OnChanges hook is called after one or more of our component properties have been changed.\r\n     * The ngOnChanges method receives a parameter which tells which properties have changed\r\n     **/\r\n    // ngOnChanges(changes: {[propName: string]: SimpleChange}): void {\r\n    //     console.log(4);\r\n    // }\r\n\r\n    /**\r\n     * There may be times when we just want to do something in case an item was removed or added,\r\n     * or if only a particular property changed, for instance.\r\n     * If we run into one of these scenarios, we can use the DoCheck hook.\r\n     * Itâ€™s important to note that the OnChanges hook gets overriden by DoCheck so\r\n     * if we implement both, OnChanges will be ignored.\r\n     *\r\n     * great article on writing custom logic when things change\r\n     * http://teropa.info/blog/2016/03/06/writing-an-angular-2-template-directive.html\r\n     */\r\n    //ngDoCheck(changes: {[propName: string]: SimpleChange}): void {\r\n    //    console.log(3);\r\n    //}\r\n\r\n    /**\r\n     * The AfterContentChecked is called after the directive check has finished.\r\n     * The check, in this context, is the change detection system check.\r\n     * The other two hooks: AfterViewInit and AfterViewChecked are triggered right after the content ones,\r\n     * right after the view has been fully initialized.\r\n     * Those two hooks are only applicable to components, and not to directives.\r\n     *\r\n     * Also, the AfterXXXInit hooks are only called once during the directive lifecycle,\r\n     * while the AfterXXXChecked hooks are called after every change detection cycle.\r\n     */\r\n    // ngAfterContentInit() {\r\n    //    console.log(5);\r\n    // }\r\n\r\n    //ngAfterContentChecked() {\r\n    //    console.log(6);\r\n    //}\r\n\r\n    //ngAfterViewInit() {\r\n    //    console.log(7);\r\n    //}\r\n\r\n    //ngAfterViewChecked() {\r\n    //    console.log(8);\r\n    //}\r\n}\r\n"]}