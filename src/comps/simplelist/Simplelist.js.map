{"version":3,"file":"Simplelist.js","sourceRoot":"","sources":["Simplelist.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAuBA;gBAiBI,oBAAY,OAAuB,EAAU,cAAgC;oBAAhC,mBAAc,GAAd,cAAc,CAAkB;oBAZnE,YAAO,GAAqB,IAAI,mBAAY,EAAE,CAAC;oBAuCjD,sBAAiB,GAAG,EAAE,CAAC;oBAtB3B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAChD,CAAC;gBAID,8BAAS,GAAT;oBACI,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBAGd,CAAC;gBACL,CAAC;gBAED,+BAAU,GAAV,UAAW,IAAI;oBACX,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;wBACf,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC9B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;gBACL,CAAC;gBAKD,4BAAO,GAAP,UAAQ,IAAI;oBACR,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACZ,IAAI,GAAG,GAAG,IAAI,CAAC;wBACf,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;4BAC1B,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBAC9B,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;4BACtC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClD,CAAC;wBACD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;oBACvC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;gBACL,CAAC;gBAzDD;oBAAC,YAAK,EAAE;;wDAAA;gBACR;oBAAC,YAAK,EAAE;;2DAAA;gBACR;oBAAC,YAAK,EAAE;;wDAAA;gBACR;oBAAC,aAAM,EAAE;;2DAAA;gBAvBb;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,aAAa;wBACvB,QAAQ,EAAE,6lBAcT;qBACJ,CAAC;;8BAAA;gBA8DF,iBAAC;YAAD,CAAC,AA7DD,IA6DC;YA7DD,mCA6DC,CAAA","sourcesContent":["import {\r\n    Component, Input, Output, EventEmitter, IterableDiffer, Inject, IterableDiffers,\r\n    ChangeDetectorRef\r\n} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'simple-list',\r\n    template: `\r\n        <div *ngIf=\"!list\">\r\n            Loading...\r\n        </div>\r\n        <div *ngIf=\"list\">\r\n            <table class=\"table table-striped table-bordered table-hover\">\r\n                <tbody>\r\n                    <tr *ngFor=\"let item of list\" (mouseover)=\"current.emit(item)\" (mouseout)=\"current.emit(null)\">\r\n                        <td *ngIf=\"!link\">{{getContent(item)}}</td>\r\n                        <td *ngIf=\"link\"><a [routerLink]=\"getLink(item)\">{{getContent(item)}}</a></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    `\r\n})\r\nexport class SimpleList {\r\n\r\n    @Input() list:any[];\r\n    @Input() content:((any)=>string);\r\n    @Input() link:(any)=>any[];\r\n    @Output() current:EventEmitter<any> = new EventEmitter();\r\n\r\n    /**\r\n     * Checking for changes In order to evaluate what changed, Angular provides differs .\r\n     * Differs will evaluate a given property of your directive to determine what changed .\r\n     * There are two types of built-in differs: iterable differs and key-value differs .\r\n     * Iterable differs Iterable differs should be used when we have a list-like structure and weâ€™re only interested\r\n     * on knowing things that were added or removed from that list.\r\n     * Key-value differs Key-value differs should be used for dictionary-like structures,\r\n     * and it works at the key level. This differ will identify changes when a new key is added,\r\n     * when a key removed and when the value of a key changed.\r\n     */\r\n    constructor(differs:IterableDiffers, private changeDetector:ChangeDetectorRef) {\r\n\r\n        // we can also re-use an existing changeDetector via:\r\n        // this.differ = this.differs.find(items).create(this.changeDetector);\r\n        // to keep track of changes\r\n        this.differ = differs.find([]).create(null);\r\n    }\r\n\r\n    private differ:IterableDiffer;\r\n\r\n    ngDoCheck():void {\r\n        var changes = this.differ.diff(this.list);\r\n        if (changes) {\r\n            //changes.forEachAddedItem(r => console.log('Added to movie list', JSON.stringify(r.item)));\r\n            //changes.forEachRemovedItem(r => console.log('Removed from list', JSON.stringify(r.item)));\r\n        }\r\n    }\r\n\r\n    getContent(item):string {\r\n        if (this.content) {\r\n            return this.content(item);\r\n        } else {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    // work around a problem with changing links for items (Angular2-beta doesn't like that)\r\n    private linkResultPerItem = {};\r\n\r\n    getLink(item):(any)=>any[] {\r\n        if (this.link) {\r\n            var key = item;\r\n            if (typeof key === \"object\") {\r\n                key = JSON.stringify(key);\r\n            }\r\n            if (this.linkResultPerItem[key] == null) {\r\n                this.linkResultPerItem[key] = this.link(item);\r\n            }\r\n            return this.linkResultPerItem[key];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n}"]}